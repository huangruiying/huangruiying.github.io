<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>线程与线程池 on 博客</title>
    <link>https://huangruiying.github.io/tags/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
    <description>Recent content in 线程与线程池 on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 23 Aug 2023 15:46:40 +0800</lastBuildDate><atom:link href="https://huangruiying.github.io/tags/%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>为什么不显式创建线程而是用线程池</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%BE%E5%BC%8F%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E8%80%8C%E6%98%AF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%BE%E5%BC%8F%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E8%80%8C%E6%98%AF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>不方便集中管理 无法控制数量，过多线程并行会增加系统开销，甚至hang住&amp;amp;打瘫 开销1：cpu时间片分配资源时，线程会频繁唤醒挂起 开销2：频繁创建&amp;amp;销毁线程，占用cpu资源 复用性低，不能有效发挥多线程性能（有限资源下）</description>
    </item>
    
    <item>
      <title>线程：阻塞与唤醒</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E4%B8%8E%E5%94%A4%E9%86%92/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E4%B8%8E%E5%94%A4%E9%86%92/</guid>
      <description>JVM自身能摆平 线程的阻塞和唤醒的切换 吗? 不能！Java的线程是映射到操作系统原生线程之上的，若要阻塞或唤醒一个线程，则需 操作系统 介入。
为什么线程阻塞和唤醒的切换很消耗资源? 因为设计线程到用户态与核心态之间切换(这种切换会消耗大量的系统资源)
用户态与核心态之间切换，到底做了什么事情? 用户态与内核态都有各自专用的内存空间，专用的寄存器 用户态切换至内核态，需要传递给许多变量、参数给内核 内核也需要保护好用户态在切换时的一些寄存器值、变量等，以便内核态调用结束后切换回用户态继续工作。
到底什么是用户态，什么是内核态 内核态: CPU可以访问内存所有数据，包括外围设备；例如硬盘, 网卡。CPU也可以将自己从一个程序切换到另一个程序 用户态: 只能受限的访问内存，且不允许访问外围设备。占用CPU的能力被剥夺，CPU资源可以被其他程序获取
为什么需要用户态切换到核心态 限制不同程序之间的访问能力，防止程序获取其他程序的数据，防止水平越权，将信息泄漏 因此，CPU划分出两个权限等级：用户态 和 内核态</description>
    </item>
    
  </channel>
</rss>
