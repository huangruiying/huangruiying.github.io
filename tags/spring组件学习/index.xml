<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring组件学习 on 博客</title>
    <link>https://huangruiying.github.io/tags/spring%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/</link>
    <description>Recent content in Spring组件学习 on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 13 Jul 2023 14:01:20 +0800</lastBuildDate><atom:link href="https://huangruiying.github.io/tags/spring%E7%BB%84%E4%BB%B6%E5%AD%A6%E4%B9%A0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot-接口学习-Converter</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/springframework/springboot-%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0-convertert%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Thu, 13 Jul 2023 14:01:20 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/springframework/springboot-%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0-convertert%E4%BD%93%E7%B3%BB/</guid>
      <description>Converter的作用是什么 Converter 是 Spring 框架中的一个通用接口，用于在不同的类型之间进行转换。它定义了一个 convert 方法，用于将一个对象从一个类型转换为另一个类型 Converter核心方法介绍 Converter的作用范围是什么 如何自定义一个Converter // 一对一转换示例;比如String转Boolean、String转Integer // org.springframework.core.convert.converter.Converter&amp;lt;S, T&amp;gt; import org.springframework.context.annotation.Configuration; @Configuration public class ConvertConfiguration() { @Bean public Converter&amp;lt;String, LocalDate&amp;gt; localDateConverter() { return new Converter&amp;lt;String, LocalDate&amp;gt;() { @Override public LocalDate convert(String source) { return LocalDate.parse(source, DateTimeFormatter.ofPattern(&amp;#34;yyyy-MM-dd&amp;#34;)); } }; } } // 一转多示例;比如String转Enum // org.springframework.core.convert.converter.ConverterFactory&amp;lt;S, R&amp;gt; public class StringToEnumConverterFactory implements ConverterFactory&amp;lt;String, Enum&amp;gt; { @Override public &amp;lt;T extends Enum&amp;gt; Converter&amp;lt;String, T&amp;gt; getConverter(Class&amp;lt;T&amp;gt; targetType) { return new StringToEnum(ConversionUtils.</description>
    </item>
    
    <item>
      <title>SpringBoot-接口学习-HandlerMethodArgumentResolver</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/springframework/springboot-%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0-handlermethodargumentresolver/</link>
      <pubDate>Thu, 13 Jul 2023 14:01:20 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/springframework/springboot-%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0-handlermethodargumentresolver/</guid>
      <description>HandlerMethodArgumentResolver
是SpringBoot的一个扩展接口，用于在http请求到控制层(controller)之前，根据需求灵活指定具体参数的值，并配合Spring框架，将新的参数作为入参，请求到控制层的入口方法。 该接口中一共存在两个方法
1. supportsParameter: 作用是匹配规则，当满足本方法的规则时，会执行resolveArgument。 2. resolveArgument: 作用是具体解析/操作参数。 @startuml &amp;#39;https://plantuml.com/sequence-diagram legend center Http请求调用HandlerMethodArgumentResolver流程 end legend autonumber 前端 -&amp;gt; RequestMappingHandlerAdapter#invokeHandlerMethod : 发送请求 RequestMappingHandlerAdapter#invokeHandlerMethod -&amp;gt; RequestMappingHandlerAdapter#createInvocableHandlerMethod: 初始化方法处理器 RequestMappingHandlerAdapter#createInvocableHandlerMethod -&amp;gt; RequestMappingHandlerAdapter#createInvocableHandlerMethod: 调用 setHandlerMethodArgumentResolvers 初始化参数解析器(自定义的也在其中) 团油支付 --&amp;gt; 团油订单: 支付单success 团油订单 --&amp;gt; &amp;#34;骑士卡|团油前端&amp;#34;: 订单success &amp;#34;骑士卡|团油前端&amp;#34; -&amp;gt; &amp;#34;骑士卡|团油前端&amp;#34;: 在收银台选择支付方式 &amp;#34;骑士卡|团油前端&amp;#34; -&amp;gt; 团油支付: 携带支付方式，获取支付参数(含支付串获取地址的) group 间连通道 团油支付 -&amp;gt; 团油支付: 间连通道：根据开关(灰度、白名单...)选择通道，生成scheme 团油支付 --&amp;gt; &amp;#34;骑士卡|团油前端&amp;#34;: 间连支付：返回scheme + 间连标识 &amp;#34;骑士卡|团油前端&amp;#34; -&amp;gt; 微信or支付宝: 跳转微信or支付宝 微信or支付宝 -&amp;gt; 团油支付: 获取支付串 团油支付 --&amp;gt; 微信or支付宝: 依据支付串，唤起小程序收银台 end group 直连通道 团油支付 -&amp;gt; 团油支付: 直连通道：根据收款主体，路由支付服务类 团油支付 --&amp;gt; &amp;#34;骑士卡|团油前端&amp;#34;: 直连支付：返回唤起app支付的h5参数 &amp;#34;骑士卡|团油前端&amp;#34; -&amp;gt; 微信or支付宝: 跳转微信or支付宝 end 微信or支付宝 -&amp;gt; 微信or支付宝: 用户支付成功 微信or支付宝 --&amp;gt; 团油支付: 支付结果回告 @enduml SpringBoot是如何使用HandlerMethodArgumentResolver进行解析的呢?</description>
    </item>
    
    <item>
      <title>SpringBoot-接口学习-HttpMessageConverter</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/springframework/springboot-%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0-httpmessageconvertert%E4%BD%93%E7%B3%BB/</link>
      <pubDate>Thu, 13 Jul 2023 14:01:20 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/springframework/springboot-%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0-httpmessageconvertert%E4%BD%93%E7%B3%BB/</guid>
      <description>HttpMessageConverter的作用是什么 将请求的HTTP协议转换为Java对象 将响应的Java对象转换为HTTP协议 rpc HttpMessageConverter核心方法介绍 -- 是否可将请求的HTTP协议读为对象 canRead -- 是否可将响应的对象写到HTTP协议 canWrite -- 将请求的Http协议读成对象 read -- 将响应的对象写入Http协议 write -- 获取当前转换器支持的所有Media类型 getSupportedMediaTypes HttpMessageConverter的作用范围是什么 对于Http请求，作为服务对外暴露接口时：
使用@RequestBody注解时，HTTP转Java对象
使用@ResponseBody注解时，Java对象转HTTP
对于Rpc请求，使用Feign请求注册中心其他服务时：
将请求参数转换成Http参数
将响应的Http数据，通过SpringDecoder调用HttpMessageConverter,转换成接口定义的对象。
Http和Rpc场景，维护的位置在哪？ rpc: FeignClientsConfiguration#messageConverters http: RestTemplate#messageConverters // 发送http请求前 RequestCallback#doWithRequest 中处理，使用 // 处理http响应
// 接收http请求前 HttpRequestHandler#handleRequest // 响应数据
如何自定义一个HttpMessageConverter package czb.settle.ledger.core.config.application; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpInputMessage; import org.springframework.http.HttpOutputMessage; import org.springframework.http.MediaType; import org.springframework.http.converter.AbstractHttpMessageConverter; import org.springframework.http.converter.HttpMessageNotReadableException; import org.springframework.http.converter.HttpMessageNotWritableException; import org.springframework.lang.Nullable; import org.springframework.util.Assert; import org.springframework.util.StreamUtils; import java.io.IOException; import java.</description>
    </item>
    
    <item>
      <title>SpringBoot-接口学习-InitializingBean</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/springframework/springboot-%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0-initializingbean/</link>
      <pubDate>Thu, 13 Jul 2023 14:01:20 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/springframework/springboot-%E6%8E%A5%E5%8F%A3%E5%AD%A6%E4%B9%A0-initializingbean/</guid>
      <description>在设置了所有「当前对象」属性后调用
public class A implements InitializingBean{
}</description>
    </item>
    
  </channel>
</rss>
