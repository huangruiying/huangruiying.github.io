<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on 博客</title>
    <link>https://huangruiying.github.io/tags/java/</link>
    <description>Recent content in Java on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 26 Jan 2024 15:46:40 +0800</lastBuildDate><atom:link href="https://huangruiying.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>创建对象控制：控制某类可以创建的对象个数</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%8E%A7%E5%88%B6%E6%8E%A7%E5%88%B6%E6%9F%90%E7%B1%BB%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%B8%AA%E6%95%B0/</link>
      <pubDate>Fri, 26 Jan 2024 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E6%8E%A7%E5%88%B6%E6%8E%A7%E5%88%B6%E6%9F%90%E7%B1%BB%E5%8F%AF%E4%BB%A5%E5%88%9B%E5%BB%BA%E7%9A%84%E5%AF%B9%E8%B1%A1%E4%B8%AA%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>JVM参数: -javaagent介绍与使用</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/jvm%E5%8F%82%E6%95%B0-javaagent%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/jvm%E5%8F%82%E6%95%B0-javaagent%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>代理 (agent) 是在你的main方法前的一个拦截器 (interceptor)，也就是在main方法执行之前，执行agent的代码。 agent的代码与你的main方法在同一个JVM中运行，并被同一个system classloader装载，被同一的安全策略 (security policy) 和上下文 (context) 所管理。
叫代理（agent）这个名字有点误导的成分，它与我们一般理解的代理不大一样。java agent使用起来比较简单。
怎样写一个java agent? 只需要实现premain这个方法
public static void premain(String agentArgs, Instrumentation inst) JDK 6 中如果找不到上面的这种premain的定义，还会尝试调用下面的这种premain定义：
public static void premain(String agentArgs) 2. Agent 类必须打成jar包，然后里面的 META-INF/MAINIFEST.MF 必须包含 Premain-Class这个属性。
下面是一个MANIFEST.MF的例子：
Manifest-Version: 1.0 Premain-Class:MyAgent1 Created-By:1.6.0_06 然后把MANIFEST.MF 加入到你的jar包中。
所有的这些Agent的jar包，都会自动加入到程序的classpath中。所以不需要手动把他们添加到classpath。 除非你想指定classpath的顺序。
一个java程序中-javaagent这个参数的个数是没有限制的，所以可以添加任意多个java agent。
所有的java agent会按照你定义的顺序执行。 例如：
java -javaagent:MyAgent1.jar -javaagent:MyAgent2.jar -jar MyProgram.jar 假设MyProgram.jar里面的main函数在MyProgram中。
MyAgent1.jar, MyAgent2.jar, 这2个jar包中实现了premain的类分别是MyAgent1, MyAgent2 程序执行的顺序将会是
MyAgent1.premain -&amp;gt; MyAgent2.premain -&amp;gt; MyProgram.main 5. 另外，放在main函数之后的premain是不会被执行的，</description>
    </item>
    
    <item>
      <title>获取类的所有子类</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E7%B1%BB%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%90%E7%B1%BB/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E5%8F%8D%E5%B0%84%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E7%B1%BB%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%90%E7%B1%BB/</guid>
      <description>// 获取类的所有子类 public static Map&amp;lt;String, T&amp;gt; getBeans(Class father) { return applicationContext.getBeansOfType(father); }</description>
    </item>
    
    <item>
      <title>内存泄露：ByteArrayOutputStream</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2bytearrayoutputstream/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2bytearrayoutputstream/</guid>
      <description>ByteArrayOutputStream</description>
    </item>
    
    <item>
      <title>为什么不显式创建线程而是用线程池</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%BE%E5%BC%8F%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E8%80%8C%E6%98%AF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%98%BE%E5%BC%8F%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E8%80%8C%E6%98%AF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid>
      <description>不方便集中管理 无法控制数量，过多线程并行会增加系统开销，甚至hang住&amp;amp;打瘫 开销1：cpu时间片分配资源时，线程会频繁唤醒挂起 开销2：频繁创建&amp;amp;销毁线程，占用cpu资源 复用性低，不能有效发挥多线程性能（有限资源下）</description>
    </item>
    
    <item>
      <title>线程：阻塞与唤醒</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E4%B8%8E%E5%94%A4%E9%86%92/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E4%B8%8E%E5%94%A4%E9%86%92/</guid>
      <description>JVM自身能摆平 线程的阻塞和唤醒的切换 吗? 不能！Java的线程是映射到操作系统原生线程之上的，若要阻塞或唤醒一个线程，则需 操作系统 介入。
为什么线程阻塞和唤醒的切换很消耗资源? 因为设计线程到用户态与核心态之间切换(这种切换会消耗大量的系统资源)
用户态与核心态之间切换，到底做了什么事情? 用户态与内核态都有各自专用的内存空间，专用的寄存器 用户态切换至内核态，需要传递给许多变量、参数给内核 内核也需要保护好用户态在切换时的一些寄存器值、变量等，以便内核态调用结束后切换回用户态继续工作。
到底什么是用户态，什么是内核态 内核态: CPU可以访问内存所有数据，包括外围设备；例如硬盘, 网卡。CPU也可以将自己从一个程序切换到另一个程序 用户态: 只能受限的访问内存，且不允许访问外围设备。占用CPU的能力被剥夺，CPU资源可以被其他程序获取
为什么需要用户态切换到核心态 限制不同程序之间的访问能力，防止程序获取其他程序的数据，防止水平越权，将信息泄漏 因此，CPU划分出两个权限等级：用户态 和 内核态</description>
    </item>
    
    <item>
      <title>震惊！LocalDateTime.of 比 .plusDays(1) 性能快50倍</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E9%9C%87%E6%83%8Alocaldatetime.of-%E6%AF%94-.plusdays1-%E6%80%A7%E8%83%BD%E5%BF%AB50%E5%80%8D/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E9%9C%87%E6%83%8Alocaldatetime.of-%E6%AF%94-.plusdays1-%E6%80%A7%E8%83%BD%E5%BF%AB50%E5%80%8D/</guid>
      <description>// 震惊！LocalDateTime.of 比 .plusDays(1) 性能快50倍 public class Demo { public static void main(String[] args) { LocalDateTime now = LocalDateTime.now(); long l = System.currentTimeMillis(); for (int i = 0; i &amp;lt; 100000000; i++) { LocalDateTime localDateTime = now.plusDays(1); } long l1 = System.currentTimeMillis(); System.out.println(&amp;#34;plus time: &amp;#34; + l1 - l); for (int i = 0; i &amp;lt; 100000000; i++) { LocalDateTime localDateTime = LocalDateTime.of(now.toLocalDate(), LocalTime.MAX); } long l2 = System.currentTimeMillis(); System.out.println(&amp;#34;of time: &amp;#34; + l2 - l1); } } // plus time: 1950 // of time: 41 </description>
    </item>
    
    <item>
      <title>重写：文件类加载器</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/golang/golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/golang/golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>Golang文件基础组成 1. 包声明 package main 2. 引入包 import &amp;quot;fmt&amp;quot; 3. 函数 /* 多行注释：这是一个测试函数 */ func main() { // 4.注释: 这是我的第一个简单的程序 fmt.Println(&amp;quot;Hello, World!&amp;quot;) 5. 声明一个变量 [ var identifier type ] var def_str string = &amp;quot;huangruiying&amp;quot; def_str = &amp;quot;huangruiying1&amp;quot; fmt.Println(def_str) var def_int1, def_int2 int = 1, 2 fmt.Println(def_int1, def_int2) } 闭包 函数作为另外一个函数的实参 语言函数方法 type Circle struct { radius float64 } func (c Circle) getArea() float64 { //c.radius 即为 Circle 类型对象中的属性 return 3.</description>
    </item>
    
    <item>
      <title>重写：文件类加载器</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E9%87%8D%E5%86%99%E6%96%87%E4%BB%B6%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E9%87%8D%E5%86%99%E6%96%87%E4%BB%B6%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</guid>
      <description>常见的类加载器有三种，
当需要以.class文件的形式加载字节码到Jvm时，我们可以定义一个根据字节码文件路径加载类的加载器。
package org.huangry.colorful.project.common.utils.classloader; import lombok.SneakyThrows; import java.io.ByteArrayOutputStream; import java.io.FileInputStream; import java.io.InputStream; /** * 自定义字节码文件类加载器 * * @author huangry * Created in 2023/9/6 16:10 */ public class FileSystemClassLoader extends ClassLoader { /** * 字节码文件所属目录 */ private final String bytecodeDirectory; public FileSystemClassLoader(String bytecodeDirectory) { this.bytecodeDirectory = bytecodeDirectory; } @Override protected Class&amp;lt;?&amp;gt; findClass(String name) throws ClassNotFoundException { // 查找类是否存在 预定义的目录bytecodeDirectory内 Class&amp;lt;?&amp;gt; clazz = findLoadedClass(name); if (clazz != null) { // 当前类被加载过，直接返回加载好的类 return clazz; } // 双亲委派：获得父类的加载器，委派给父类加载 ClassLoader parent = this.</description>
    </item>
    
    <item>
      <title>注解: NotBlank NotEmpty的使用</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E6%B3%A8%E8%A7%A3-notblank-notempty%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E6%B3%A8%E8%A7%A3-notblank-notempty%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description> @NotBlank @NotEmpty (javax.validation.constraints.NotBlank) 接口标明 org.springframework.validation.annotation.Validated 注解 要校验的对象标明 javax.validation.Valid 注解 要校验的对象属性标明 javax.validation.constraints.NotBlank 注解 示例： public class Demo{ // 接口操作 @PostMapping(&amp;#34;/demo&amp;#34;) @Validated public Wrapper&amp;lt;Response&amp;gt; demo(@RequestBody @Valid Request request) throws Exception { Response response = method(request); return WrapMapper.&amp;lt;Response&amp;gt;ok().result(response); } public class Request { @ApiModelProperty(&amp;#34;开始日期&amp;#34;) @NotBlank(message = &amp;#34;开始日期不能为空&amp;#34;) private String begDate; @ApiModelProperty(&amp;#34;结束日期&amp;#34;) @NotBlank(message = &amp;#34;结束日期不能为空&amp;#34;) private String endDate; } } </description>
    </item>
    
    <item>
      <title>资源回收：对象销毁前的资源释放</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E8%B5%84%E6%BA%90%E5%9B%9E%E6%94%B6%E5%AF%B9%E8%B1%A1%E9%94%80%E6%AF%81%E5%89%8D%E7%9A%84%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E8%B5%84%E6%BA%90%E5%9B%9E%E6%94%B6%E5%AF%B9%E8%B1%A1%E9%94%80%E6%AF%81%E5%89%8D%E7%9A%84%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE/</guid>
      <description>Java对象的销毁是由GC操作，回收前GC会调用目标对象的Object#finalize方法，进行资源释放。
如何确认资源是否有释放呢？
finalize 添加日志 操作系统层面查看 </description>
    </item>
    
    <item>
      <title>Perf4j 介绍</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/perf4j/perf4j%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 20 Jun 2023 16:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/perf4j/perf4j%E4%BB%8B%E7%BB%8D/</guid>
      <description>org.perf4j perf4j ${perf4j.version} Perf4J 是一个 Java 的性能记录、监测和分析库，主要功能如下： 监测应用程序性能：支持监测 Java 应用程序的各种性能指标，如内存使用情况、CPU 使用情况、线程状态等。 实时分析性能数据：支持实时分析性能数据，帮助开发者快速定位性能问题。 可视化性能数据：支持将性能数据以图表的形式展示，方便开发者对性能数据进行分析和比较。 支持分布式环境：支持在分布式环境中进行性能监测和分析。 支持自定义监测指标：支持自定义监测指标，方便开发者根据自己的需求进行监测和分析。 总的来说，Perf4J 是一个功能强大的性能监控和分析框架，提供了丰富的功能和工具，帮助开发者快速定位和解决性能问题。
使用方式 @Profiled(tag = &amp;ldquo;PayDetailService.beforePay&amp;rdquo;)</description>
    </item>
    
  </channel>
</rss>
