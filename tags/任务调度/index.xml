<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>任务调度 on 博客</title>
    <link>https://huangruiying.github.io/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/</link>
    <description>Recent content in 任务调度 on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 19 Jul 2023 16:11:18 +0800</lastBuildDate><atom:link href="https://huangruiying.github.io/tags/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>xxl-job原理剖析 - 客户端执行器是如何被通知的</title>
      <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/xxljob-%E6%89%B9%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/xxl-job%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%89%A7%E8%A1%8C%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%AB%E9%80%9A%E7%9F%A5%E7%9A%84/</link>
      <pubDate>Wed, 19 Jul 2023 16:11:18 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/xxljob-%E6%89%B9%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/xxl-job%E5%8E%9F%E7%90%86%E5%89%96%E6%9E%90-%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%89%A7%E8%A1%8C%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%AB%E9%80%9A%E7%9F%A5%E7%9A%84/</guid>
      <description>xxl-job 管理端与客户端采用长连接方式通讯
项目启动时所以jobHandler维护到哪 jobHandlerRepository
注册到管理端的方式 ？初始化了什么 XxlJobExecutor#start.initAdminBizList(adminAddresses[管理端地址], accessToken) AdminBiz adminBiz = (AdminBiz) new XxlRpcReferenceBean(
通过NettyHttp的方式 注册到管理端[调度中心] XxlJobExecutor#start.initRpcProvider(ip, port, appName, accessToken) 1. 创建连接服务端的rpc工厂 xxlRpcProviderFactory = new XxlRpcProviderFactory(); 1. 初始化rpc工厂的相关配置： 通讯方式[NetEnum.NETTY_HTTP]、 Serializer[HESSIAN、HESSIAN1、PROTOSTUFF、KRYO、JACKSON]、 客户端IP、 客户端端口、 TOKEN、 ExecutorServiceRegistry[将客户端ip、客户端与服务端通讯端口 注册到服务端的类，调用该类的start函数]、 ExecutorServiceRegistry#start ExecutorRegistryThread.getInstance().start(param.get(&amp;ldquo;appName&amp;rdquo;), param.get(&amp;ldquo;address&amp;rdquo;)); 注册到管理端具体 执行器组 的参数 serviceRegistryParam:appName[执行器名称],address[当前客户端地址]、 2. 接收管理端通知的服务类 添加到连接工厂中 xxlRpcProviderFactory.addService(ExecutorBiz.class.getName(), null, new ExecutorBizImpl()); 3. 启动连接，通过NettyHttpServer#start 进行连接
接收管理端[调度中心]的调用通知 NettyHttpServerHandler#process
执行结果回调到管理端 TriggerCallbackThread#doCallback 实际使用的是 AdminBiz#callback
客户端如何 执行新任务 XxlJobExecutor.registJobThread 1. 根据jobId + handler 创建任务 2. 通过 JobThread.start 触发任务(启动一个线程) 3.</description>
    </item>
    
  </channel>
</rss>
