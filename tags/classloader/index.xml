<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>classloader on 博客</title>
    <link>https://huangruiying.github.io/tags/classloader/</link>
    <description>Recent content in classloader on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 23 Aug 2023 15:46:40 +0800</lastBuildDate><atom:link href="https://huangruiying.github.io/tags/classloader/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>重写：文件类加载器</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/golang/golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/golang/golang%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</guid>
      <description>Golang文件基础组成 1. 包声明 package main 2. 引入包 import &amp;quot;fmt&amp;quot; 3. 函数 /* 多行注释：这是一个测试函数 */ func main() { // 4.注释: 这是我的第一个简单的程序 fmt.Println(&amp;quot;Hello, World!&amp;quot;) 5. 声明一个变量 [ var identifier type ] var def_str string = &amp;quot;huangruiying&amp;quot; def_str = &amp;quot;huangruiying1&amp;quot; fmt.Println(def_str) var def_int1, def_int2 int = 1, 2 fmt.Println(def_int1, def_int2) } 闭包 函数作为另外一个函数的实参 语言函数方法 type Circle struct { radius float64 } func (c Circle) getArea() float64 { //c.radius 即为 Circle 类型对象中的属性 return 3.</description>
    </item>
    
    <item>
      <title>重写：文件类加载器</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E9%87%8D%E5%86%99%E6%96%87%E4%BB%B6%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</link>
      <pubDate>Wed, 23 Aug 2023 15:46:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E8%AF%AD%E8%A8%80/java/%E9%87%8D%E5%86%99%E6%96%87%E4%BB%B6%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</guid>
      <description>常见的类加载器有三种，
当需要以.class文件的形式加载字节码到Jvm时，我们可以定义一个根据字节码文件路径加载类的加载器。
package org.huangry.colorful.project.common.utils.classloader; import lombok.SneakyThrows; import java.io.ByteArrayOutputStream; import java.io.FileInputStream; import java.io.InputStream; /** * 自定义字节码文件类加载器 * * @author huangry * Created in 2023/9/6 16:10 */ public class FileSystemClassLoader extends ClassLoader { /** * 字节码文件所属目录 */ private final String bytecodeDirectory; public FileSystemClassLoader(String bytecodeDirectory) { this.bytecodeDirectory = bytecodeDirectory; } @Override protected Class&amp;lt;?&amp;gt; findClass(String name) throws ClassNotFoundException { // 查找类是否存在 预定义的目录bytecodeDirectory内 Class&amp;lt;?&amp;gt; clazz = findLoadedClass(name); if (clazz != null) { // 当前类被加载过，直接返回加载好的类 return clazz; } // 双亲委派：获得父类的加载器，委派给父类加载 ClassLoader parent = this.</description>
    </item>
    
  </channel>
</rss>
