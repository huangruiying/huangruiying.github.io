<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redission on 博客</title>
    <link>https://huangruiying.github.io/tags/redission/</link>
    <description>Recent content in Redission on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 18 Mar 2024 16:45:40 +0800</lastBuildDate><atom:link href="https://huangruiying.github.io/tags/redission/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Redission - 配置及使用</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/redission/redission%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Mon, 18 Mar 2024 16:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/redission/redission%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</guid>
      <description>&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.redisson&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;redisson&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.17.6&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; import org.redisson.Redisson; import org.redisson.api.RLock; import org.redisson.api.RedissonClient; import org.redisson.config.Config; import org.redisson.config.SingleServerConfig; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.stereotype.Component; import java.util.concurrent.TimeUnit; @Component public class RedissonConfig { @Value(&amp;#34;${spring.redis.host:10.10.18.4}&amp;#34;) private String host; @Value(&amp;#34;${spring.redis.port:6379}&amp;#34;) private String port; @Value(&amp;#34;${spring.redis.password:fZfX&amp;amp;POXar#RY**h}&amp;#34;) private String password; @Bean public RedissonClient redisson(){ Config config = new Config(); SingleServerConfig ssc = config.useSingleServer(); ssc.setAddress(&amp;#34;redis://&amp;#34; + host + &amp;#34;:&amp;#34; + port) .setPassword(password); return Redisson.create(config); } private static RedissonClient redissonClient; public static void main(String[] args) throws InterruptedException { RLock lock = redissonClient.</description>
    </item>
    
    <item>
      <title>Redission - 续锁流程</title>
      <link>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/redission/redission%E7%BB%AD%E9%94%81%E7%9C%8B%E9%97%A8%E7%8B%97/</link>
      <pubDate>Mon, 18 Mar 2024 16:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/redission/redission%E7%BB%AD%E9%94%81%E7%9C%8B%E9%97%A8%E7%8B%97/</guid>
      <description>解决了锁超时后因未处理完任务导致其他机器抢占锁的情况
@startuml title Redission续锁流程 start :tryLock(); :tryAcquire(); :tryAcquireAsync(); switch(tryAcquireAsync: leaseTime(锁超时时间)) case(&amp;gt;0L 自定义超时时间逻辑) :设置锁超时时间为leaseTime; :。。。; case(&amp;lt;=0L 续期逻辑) :scheduleExpirationRenewal() 进行续期; :renewExpiration() 启动定时器,每1/3锁租期,执行一次续期;续期30s :调用 renewExpirationAsync() 进行续期; if (判断条件2) then (是) :符合判断条件2; stop else (否) :不符合; endif endswitch :准备结束; stop @enduml </description>
    </item>
    
  </channel>
</rss>
