<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>令牌桶 on 博客</title>
    <link>https://huangruiying.github.io/tags/%E4%BB%A4%E7%89%8C%E6%A1%B6/</link>
    <description>Recent content in 令牌桶 on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 19 Jul 2023 16:11:18 +0800</lastBuildDate><atom:link href="https://huangruiying.github.io/tags/%E4%BB%A4%E7%89%8C%E6%A1%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>限流算法之令牌桶</title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/%E4%BB%A4%E7%89%8C%E6%A1%B6%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 19 Jul 2023 16:11:18 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/%E4%BB%A4%E7%89%8C%E6%A1%B6%E6%A8%A1%E5%9E%8B/</guid>
      <description> 令牌桶核心流程 通过token系统拿token 携带有效token即认定为合法请求 无效token或无token则拒绝 细节剖析 令牌桶模型是由以下几个角色组成的： 令牌 - 相当于门票，允许服务请求处理的标识 桶 - 令牌的载体，相当于售票处 令牌生产者 - 匀速生成令牌并放入桶内的程序 是开发者控制流量的手段，开发者可以控制每10ms生成一个令牌。 当令牌数量达到上限时，就丢弃令牌。 </description>
    </item>
    
  </channel>
</rss>
