<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源软件s on 博客</title>
    <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/</link>
    <description>Recent content in 开源软件s on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 12 Jul 2023 10:45:40 +0800</lastBuildDate><atom:link href="https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>0x01.开源数据可视化系统-Davinci</title>
      <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/davinci-%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/0x01.%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F-davinci/</link>
      <pubDate>Wed, 12 Jul 2023 10:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/davinci-%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/0x01.%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E7%B3%BB%E7%BB%9F-davinci/</guid>
      <description>开源地址 https://github.com/edp963/davinci https://gitee.com/mirrors/Davinci?_from=gitee_search
二次开发 https://dumplingbao.github.io/2020/04/03/davinci-dev-egl/</description>
    </item>
    
    <item>
      <title>Dperf教程 - 1 - 介绍</title>
      <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/dperf-%E5%8E%8B%E6%B5%8B/dperf-1-%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 21 Jun 2023 16:18:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/dperf-%E5%8E%8B%E6%B5%8B/dperf-1-%E4%BB%8B%E7%BB%8D/</guid>
      <description>https://www.oschina.net/p/dperf dperf 是一款由百度开源的超高性能的网络压力测试仪。
它使用了 DPDK 与用户态 TCP 协议栈技术，用一台 x86 服务器就可以制造巨大流量：数 10 亿并发连接，百 Gbps 吞吐，千万级 HTTP CPS，其性能远远超过商业测试仪。它还能够精确显示全链路的丢包数，能够帮助你准确找到被测设备性能瑕疵。
它既可以对用来对四层网关、交换机进行性能测试，也可用来测评 CPU 的网络报文处理能力。</description>
    </item>
    
    <item>
      <title>0x01.Nginx安装与部署</title>
      <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/nginx-web%E4%B8%8E%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/0x01.nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Tue, 20 Jun 2023 16:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/nginx-web%E4%B8%8E%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/0x01.nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</guid>
      <description>mac安装brew $ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
mac安装nginx $ brew install nginx
查看安装位置 $ brew info nginx -p prefix : set prefix path (default: /usr/local/Cellar/nginx/1.25.3/)
指定or默认配置文件位置 -c filename : set configuration file (default: /usr/local/etc/nginx/nginx.conf)
指定or默认操作 -s signal : send signal to a master process: stop, quit, reopen, reload
指定or默认error.log位置 -e filename : set error log file (default: /usr/local/var/log/nginx/error.log)
启动 nginx</description>
    </item>
    
    <item>
      <title>0x01.PlantUML-IDEA的示例与使用</title>
      <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/plantuml-%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/0x01.plantuml%E5%9C%A8idea%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%A4%BA%E4%BE%8B%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 20 Jun 2023 16:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/plantuml-%E7%94%BB%E5%9B%BE%E5%B7%A5%E5%85%B7/0x01.plantuml%E5%9C%A8idea%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%A4%BA%E4%BE%8B%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description> 时序图 legend center 台账服务资金账单拉取 end legend autonumber JOB -&amp;gt; Ledger: 触发: 携带商户号 activate Ledger Ledger -&amp;gt; Apollo: 获取商户参数 activate Apollo Apollo --&amp;gt; Ledger: 商户参数: 证书地址、私钥.. deactivate Ledger -&amp;gt; Ledger: init至上下文 activate Ledger Ledger -&amp;gt; Ledger: 依据商户号，确定流程 deactivate Ledger -&amp;gt; Handler: 执行doAction，启动流程 Handler -&amp;gt; Arounder: 任务重入判断 Handler -&amp;gt; Downloader: 下载账单 Handler -&amp;gt; Extractor: 处理账单数据并入库 Ledger --&amp;gt; JOB: 任务执行完成 deactivate Ledger group 分组示例 group 示例1 Extractor -&amp;gt; Extractor: xxxxx end group 示例2 Extractor --&amp;gt; Extractor: xxxxx end end 用例图 left to right direction actor Guest as g package Professional { actor Chief as c actor &amp;#34;Food Critic&amp;#34; as fc } package Restaurant { usecase &amp;#34;Eat Food&amp;#34; as uc1 usecase &amp;#34;Pay For Food&amp;#34; as uc2 usecase &amp;#34;Drink&amp;#34; as uc3 usecase &amp;#34;Review&amp;#34; as uc4 } g--&amp;gt; uc1 g--&amp;gt; uc2 g--&amp;gt; uc3 fc--&amp;gt; uc4 类图 @startuml class Person { + String 公有属性 # String 继承 - String 私有属性 + void 公有方法() } class Student { - String 私有属性1 + void study() } class Teacher { - String 私有属性2 - void 私有方法() } Person &amp;lt;|-- Student Person &amp;lt;|-- Teacher @enduml 活动图(流程图) @startuml title 生成确认单流程 start :操作一; :操作二; switch(判断条件) case(流程1) :流程1; if (判断条件1) then (否) :不满足条件分支; stop else (是) :满足条件分支; endif :跳出判断条件1; case(流程2) :流程2; case(流程3) :流程3; if (判断条件2) then (是) :符合判断条件2; stop else (否) :不符合; endif endswitch :准备结束; stop @enduml 思维导图 +[#17ADF1] mall学习路线 ++[#lightgreen] 推荐资料 ++[#lightblue] 后端技术栈 +++_ 项目框架 +++_ 数据存储 +++_ 运维部署 +++_ 其他 ++[#orange] 搭建项目骨架 ++[#1DBAAF] 项目部署 +++_ Windows下的部署 +++_ Linux下使用Docker部署 +++_ Linux下使用Docker Compose部署 +++_ Linux下使用Jenkins自动化部署 --[#1DBAAF] 电商业务 ---_ 权限管理模块 ---_ 商品模块 ---_ 订单模块 ---_ 营销模块 --[#orange] 技术要点 --[#lightblue] 前端技术栈 --[#lightgreen] 进阶微服务 ---_ Spring Cloud技术栈 ---_ 项目部署 ---_ 技术要点 --[#yellow] 开发工具 --[#lightgrey] 扩展学习 部署图 </description>
    </item>
    
    <item>
      <title>0x02.Nginx搭建静态资源服务器</title>
      <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/nginx-web%E4%B8%8E%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/0x02.nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/</link>
      <pubDate>Tue, 20 Jun 2023 16:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/nginx-web%E4%B8%8E%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/0x02.nginx%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/</guid>
      <description>确认 Nginx 的配置文件位置 通常是/etc/nginx/nginx.conf或/etc/nginx/conf.d/default.conf
配置静态文件服务器的根目录 server { listen 80; # 监听的端口 server_name localhost; # 服务器名称 # 定义根目录 root /path/to/your/static/files; # 替换为你的静态文件所在的目录路径 # 索引文件 index index.html; # 禁止访问其他目录 location / { deny all; } } 重启 Nginx nginx -s reload
确认环境 另外，确保服务器在局域网内具有可访问性，并允许适当的端口通过防火墙。</description>
    </item>
    
    <item>
      <title>Arthas教程 - 1 - 安装与使用</title>
      <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/arthas-%E7%BA%BF%E4%B8%8A%E7%9B%91%E6%8E%A7/arthas%E6%95%99%E7%A8%8B-1-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 20 Jun 2023 16:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/arthas-%E7%BA%BF%E4%B8%8A%E7%9B%91%E6%8E%A7/arthas%E6%95%99%E7%A8%8B-1-%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description> java环境变量 # java mac export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_291.jdk/Contents/Home export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export PATH=$JAVA_HOME/bin:$PATH 下载工具&amp;amp;启动 curl -O https://arthas.aliyun.com/arthas-boot.jar java -jar arthas-boot.jar
命令-描述-使用 dashboard - 显示进程、线程、服务信息 - dashboard jad - 显示代码 - jad package.ClassName watch - 显示方法返回值 - watch package.ClassName methodName returnObj </description>
    </item>
    
    <item>
      <title>Arthas教程 - 2 - retransform redefine 动态加载class</title>
      <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/arthas-%E7%BA%BF%E4%B8%8A%E7%9B%91%E6%8E%A7/arthas%E6%95%99%E7%A8%8B-2-retransform-redefine-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDclass/</link>
      <pubDate>Tue, 20 Jun 2023 16:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/arthas-%E7%BA%BF%E4%B8%8A%E7%9B%91%E6%8E%A7/arthas%E6%95%99%E7%A8%8B-2-retransform-redefine-%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDclass/</guid>
      <description> 使用arthas的mc编译java文件 jad --source-only com.czb.finance.bill.controller.RedisTest &amp;gt; /czb/server_logs/czb-finance-bill/RedisTest.java mc /czb/server_logs/czb-finance-bill/RedisTest.java -d /czb/server_logs/czb-finance-bill 到这步报错：Compilation Error；改用本地编译方式 本地编译出class文件，上传到服务器 办法一 临时class文件上传到https://ac-data.info/ 获取url接口的response，进行curl -o 下载 curl -o RedisTest.class &amp;#34;https://objectstorage.ap-tokyo-1.oraclecloud.com/p/UXlqZOF7wz5ZQEEbrdAbiWZd7GChkpQdHccApnoj-cW6eXjUGo3uTUgeym9IAMFO/n/nrqww3senroj/b/oracle.ac-data.info/o/8fd32d16-57e6-4b76-9ac2-8dde60f46337/RedisTest.class&amp;#34; curl -o RedisTestQueryRequestAndResponse.class &amp;#34;https://objectstorage.ap-tokyo-1.oraclecloud.com/p/ckE_vVm2AOjkFynFc9ns6vGQosRRGn5--idp0JR488Ry43F3_LhcjQn6PdvV4nsb/n/nrqww3senroj/b/oracle.ac-data.info/o/8fd32d16-57e6-4b76-9ac2-8dde60f46337/RedisTest$QueryRequestAndResponse.class&amp;#34; 办法二 在本地先转换.class文件为 base64，再保存为 xxx.txt base64 &amp;lt; RedisTest.class &amp;gt; xxx.txt 把内容copy到服务器，再还原内容 base64 -d &amp;lt; xxx.txt &amp;gt; RedisTest.class 使用redefine操作class [arthas@158661]$ redefine /czb/server_logs/czb-finance-bill/RedisTest.class load class file failed: /czb/server_logs/czb-finance-bill/RedisTest.class, error: java.lang.IllegalArgumentException: Unsupported class file major version 8762 发现保存类似jdk版本问题，再去下载个与服务器一样的版本 </description>
    </item>
    
    <item>
      <title>Hugo教程 - 1 - 安装与部署</title>
      <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/hugo-%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/hugo%E6%95%99%E7%A8%8B-1-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Tue, 20 Jun 2023 16:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/hugo-%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/hugo%E6%95%99%E7%A8%8B-1-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%83%A8%E7%BD%B2/</guid>
      <description>安装brew $ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
安装hugo $ brew install hugo
验证hugo which hugo /usr/local/bin/hugo ls -l $( which hugo ) lrwxr-xr-x 1 nenglianjituan admin 31 6 15 17:04 /usr/local/bin/hugo -&amp;gt; ../Cellar/hugo/0.113.0/bin/hugo hugo version hugo v0.113.0+extended darwin/amd64 BuildDate=unknown 使用hugo # 初始化一个项目(此时有结构，但是还不能使用) hugo new site hugoblog cd hugoblog # 创建文章 (content/post) hugo new post/document.md (真实目录创建在：content/post/document.md) # 下载一款皮肤 （安装皮肤 &amp;amp; 启动服务） cd hugoblog git clone https://github.com/spf13/hyde.git themes\hyde # 指定皮肤，启动服务 hugo server -D -t hyde --buildDrafts 扩展-皮肤下载地址 试看主题效果 1.</description>
    </item>
    
    <item>
      <title>Hugo教程 - 2 - 结构介绍</title>
      <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/hugo-%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/hugo%E6%95%99%E7%A8%8B-2-%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 20 Jun 2023 16:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/hugo-%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/hugo%E6%95%99%E7%A8%8B-2-%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/</guid>
      <description>目录结构 . ├── archetypes (存放 front matter（前置数据）) ├── config.toml (全局配置文件) ├── content (存放网页的主要内容 Markdown 文件) ├── data (存放数据文件，通常是 json/yaml/toml 文件) ├── layouts (存放 HTML 模板) ├── static (存放静态文件，会被直接复制到 public 目录下) └── themes (存放现有的主题模板) content └── content ├── _index.md // https://example.com/ ├── about.md // https://example.com/about/ ├── posts | ├── _index.md // https://example.com/posts/ | ├── firstpost.md // https://example.com/posts/firstpost/ 模板(layouts、themes；layouts优先级高)语法 Hugo 使用 Go 语言的 html/template 库 作为模版引擎， 模板的标签为 {{}} , {{}} 中包含的内容叫“动作”</description>
    </item>
    
    <item>
      <title>Hugo教程 - 3 - 配置文件讲解</title>
      <link>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/hugo-%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/hugo%E6%95%99%E7%A8%8B-3-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 20 Jun 2023 16:45:40 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/hugo-%E9%9D%99%E6%80%81%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93/hugo%E6%95%99%E7%A8%8B-3-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description>hugo.toml # 网站地址 baseURL = &amp;#39;https://huangruiying.github.io/&amp;#39; # 网站语言 languageCode = &amp;#34;en-us&amp;#34; # 网站title title = &amp;#39;hugo.toml-title&amp;#39; # 主题的名字，这个要跟myblog/themes 目录中的子目录的目录名一致 theme = &amp;#34;hyde&amp;#34; # home/category/tag 页面显示的文章数 (Default: 10) paginate = 2 # home/category/tag 页面用于摘要的字数 (Default: 70) summaryLength = 10 在模板中使用配置文件定义的数据 在sidebar.html内使用BaseURL 在模板内使用常量
常量在hugo.toml中定义： baseURL = &amp;#39;https://huangruiying.github.io/&amp;#39; 常量在模板使用： {{ .Site.BaseURL }} 在模板内使用数组，循环生成标题
数组在hugo.toml中定义： [[menu.sidebar]] name = &amp;#34;新浪&amp;#34; url = &amp;#34;https://www.sina.com&amp;#34; [[menu.sidebar]] name = &amp;#34;Github&amp;#34; url = &amp;#34;https://github.com&amp;#34; 数组在模板使用： {{ range .Site.Menus.sidebar -}} &amp;lt;li&amp;gt;&amp;lt;a href=&amp;#34;{{.</description>
    </item>
    
  </channel>
</rss>
