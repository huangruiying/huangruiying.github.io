基础操作
    基础类型
        整数 长整数 浮点数 复数[(-5+4j)  (2.3-4.6j)]
    字符串
        单引号 用来指示字符串，字符串内容原样保留
        双引号 双引号中字符串与单引号相同
        三引号 可以输入多行字符串，内部可以存在单引号和双引号
    类型转换
        str()
        int()
        typeOf()
    自然字符串
        在字符串前加r/R
        r"123/n"
    Unicode字符串
        只需在字符串前面加u
        u"This is your father.(omg)"
    字符串不可变
        意味着你创造一个字符串之后，就不可以改变他
    级连字符串
        两个字符串按字面意义相邻放着 会被python自动级连
        'What\'s' 'your name?'
    转义
        单\是对字符转义
        \\是对\转义
        行末存在\表示该行字符串在下一行继续
        "This is a pig.\
        This is a dog."  等价于"This is a pig.This is a dog."
    变量定义
        broker_diff_path="/home/work/nfs/engine/hundsun/broker_diff.log"
    字符串拼接
        result = '%s%s%s' % ('1', '2', '3')
        result = '1' + '2' + '3'
        报错：'ascii' codec can't encode characters in position 0-3
        解决：在代码中加入
                reload(sys)
                sys.setdefaultencoding('utf8')
    字符串分割
        # str -- 分隔符，默认为所有的空字符，包括空格、换行(\n)、制表符(\t)等。num -- 分割次数。默认为 -1, 即分隔所有。
        str.split(str=" ", num=string.count(str))
    通过正则表达式分割
        def split(data):
            """
            使用多个分隔符分割字符串
            """
            return re.split('\+|-|\*|\/|\)|\(', data)
    去换行符、空格
        new_val = old_val.replace('\n', '')
        \r 代表回车，也就是打印头归位，回到某一行的开头。
        \n 代表换行，就是走纸，下一行。
        linux只用\n换行。
        win下用\r\n表示换行。
    循环
        for i in range(100):
            print(i)
    判断字符串是否包含某子串
        def demo():
            str1="b"
            str2="abc"
            if str1 in str2:
                print("存在")
            else:
                print("不存在")
        def demo():
            str1="a"
            str2="abc"
            if str2.find(str1)>=0:
                #包含的话，返回第一次出现的位置，位置下标是从0开始，没有的话为负数
                print("包含")
            else:
                print("不包含")

数据结构
    字典：
        # 定义
        aa = {'人才':60,'英语':'english','adress':'here'}
        print(aa) # {'人才': 60, '英语': 'english', 'adress': 'here'}
        # 添加 根据键值对添加
        aa['价格'] = 100
        print(aa) # {'人才': 60, '英语': 'english', 'adress': 'here', '价格': 100}
        # 更新 也可作为添加使用
        xx = {'hhh':'gogogo'}
        aa.update(xx)
        print(aa) # {'人才': 60, '英语': 'english', 'adress': 'here', '价格': 100, 'hhh': 'gogogo'}
        # 删除 使用del函数
        del[aa['adress']]
        print(aa) # {'人才': 60, '英语': 'english', '价格': 100, 'hhh': 'gogogo'}
        # 删除 使用pop函数，并返回值
        vv = aa.pop('人才')
        print(vv) # 60
        print(aa) # {'英语': 'english', '价格': 100, 'hhh': 'gogogo'}
        # 清空 clear方法，删除所有
        aa.clear()
        print(aa) # {}，为空
        # 判断key是否存在
        "人才" in aa
        aa __contains__ "人才"
        # 遍历 dict
        for key in aa:
            print(aa[key])
        for key,val in aa.items():
            print("KEY=",key,":","VAL=",val)



    数组：
        # 定义
        arr = ["Porsche", "Volvo", "BMW"]
        # 查询
        print(arr[0])
        # 添加
        arr.insert(1,"在指定位置插入,从0起始；若当前位置存在元素，则从当前位置起直到队尾的所有元素都向后移动位置")
        # 追加
        arr.append("Python")
        # 追加数组
        arr.extend(["1","2","3"])
        # 数组长度
        print(len(arr))
        # 遍历数组
        for val in arr:
            print("数组值: ",val)
        # 排序
        sorted(dic)
        # 排序，数组内存dict的情况
            lis = [{ "name" : "Taobao", "age" : 100},
                { "name" : "Runoob", "age" : 7 },
                { "name" : "Google", "age" : 100 },
                { "name" : "Wiki" , "age" : 200 }]

            # 通过 age 升序排序
            print ("列表通过 age 升序排序: ")
            print (sorted(lis, key = lambda i: i['age']) )
            print ("\r")

            # 先按 age 排序，再按 name 排序
            print ("列表通过 age 和 name 排序: ")
            print (sorted(lis, key = lambda i: (i['age'], i['name'])) )
            print ("\r")

            # 按 age 降序排序
            print ("列表通过 age 降序排序: ")
            print (sorted(lis, key = lambda i: i['age'],reverse=True) )

序列化协议
    json
        import json
        # 将字典类型转换为 JSON对象
        json.dumps(data,sort_keys=True[排序],indent=4[格式化])
        # 将字符串转 JSON对象
        json.loads(json_str)
        #



流程判断
    # 两条件满足任意一个进入分支
    if 条件1 or 条件2 :
    # 两条件都满足进入分支
    if 条件1 and 条件2 :
    # 满足条件进入分支
    if 条件 :
    # 不满足条件进入分支
    if not 条件 :
    # if-elif-else
    if 条件 :
    elif 条件2 :
    else:
    # 判空
    if not input:
        return

函数操作
    def dic(arg1,arg2):
        # 定义字典
        dic={}
        # 向字典添加/更新数据
        dic['key']="value"
        # 返回字典
        return dic

文件操作
    写文件 a:在原有文件基础上追加 w:覆盖原有文件
    fo = open("foo.txt", "a")
	读文件
	file = open('foo.txt', 'r')
	重命名
	# 重命名文件test1.txt到test2.txt。
    os.rename( "test1.txt", "test2.txt" )
	删除文件
	os.remove(file_name)

	读文件示例：
    try:
        while True:
            text_line = file.readline()
            if text_line:
                print(type(text_line), text_line)
            else:
                break
    finally:
        file.close()

    写文件示例：
    with open('test.txt', 'w') as f: # with好处是不用担心忘记close
        # 写文件一行，\n是换行
        f.write('Hello, world!'+"\n")
    获取文件夹包含的列表
    os.listdir(path)


系统调用
    # 调用脚本 且 传参
    os.system("sh script.sh %s %s" % (param1,param2))


网络操作


pip install
    临时替换国内源
    阿里云：https://mirrors.aliyun.com/pypi/simple/
    清华：https://pypi.tuna.tsinghua.edu.cn/simple
    中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/
    华中理工大学：http://pypi.hustunique.com/
    山东理工大学：http://pypi.sdutlinux.org/
    豆瓣：http://pypi.douban.com/simple/

    pip3 install 库名 -i 镜像地址
    pip3 install urllib3 -i https://mirrors.aliyun.com/pypi/simple/



if __name__ == "__main__":
    print('hello')





