<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>常用算法s on 博客</title>
    <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 常用算法s on 博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 10 Oct 2023 16:11:18 +0800</lastBuildDate><atom:link href="https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GeoHash地理算法</title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/geohash/geohash%E5%9C%B0%E7%90%86%E7%AE%97%E6%B3%95/</link>
      <pubDate>Tue, 10 Oct 2023 16:11:18 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/geohash/geohash%E5%9C%B0%E7%90%86%E7%AE%97%E6%B3%95/</guid>
      <description>GeoHash算法基本思想：将经纬度编码，把二维坐标转换为一维，一般情况下，精确到小数点后6位可以达到约1米精度，所以取到小数点后第六位即可。
地球经度范围是东经180到西经180，纬度范围是南纬90到北纬90；
我们设定西经为负，南纬为负，所以地球上的经度范围就是[-180 西， 180 东]，纬度范围就是[-90 南，90 北]。
东经:116°23′17〃,北纬:39°54′27〃 116.388056 , 39.907500
以上述经纬度坐标进行逼近编码，进行算法计算过程说明
对纬度坐标 39.987612 的逼近过程：
首先，将纬度区间[-90,90]进行分割，生成[-90,0),[0,90]左右两区间。坐标符合左区间，计作0，符合右区间，计作1。本case符合右区间，记1。 其次，将符合的区间[0,90]进行第二次分割，生成[0,45),[45,90]左右两区间。本case符合左区间，记0。 接着，将符合的区间[0,45)进行第二次分割，生成[0,22.5),[22.5,45)左右两区间。本case符合右区间，记1。 ... 分割n次后，区间会越来逼近纬度坐标 39.987612 将逼近后的编码记录，假设为 10011111 对经度也左同样操作，只不过区间是[-180,180]
经度的编码记录，假设为 11010000 将经纬两串编码进行组合，奇数位方经度，偶数位放纬度，假设新串为 1110 0011 0101 0101，16进制编码为 E355 ，即为坐标的GeoHash值。表示的区间是最后一次逼近的经纬度范围。 所以，逼近的次数越多，GeoHash表示的范围越小。
function change(){ // 39°54′27〃 转换为 39.9075 var d = &amp;ldquo;39&amp;rdquo;; var f = &amp;ldquo;54&amp;rdquo;; var m = &amp;ldquo;27&amp;rdquo;; // 秒/60 = 分 // 分/60 = 度 // 将秒化成分，与分累加后，再化成度，即得出结果 var f = parseFloat(f) + parseFloat(m/60); var du = parseFloat(f/60) + parseFloat(d); console.</description>
    </item>
    
    <item>
      <title>规则引擎主流算法之RETE算法</title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8Erete%E7%AE%97%E6%B3%95/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E%E4%B8%BB%E6%B5%81%E7%AE%97%E6%B3%95%E4%B9%8Brete%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 19 Jul 2023 16:11:18 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8Erete%E7%AE%97%E6%B3%95/%E8%A7%84%E5%88%99%E5%BC%95%E6%93%8E%E4%B8%BB%E6%B5%81%E7%AE%97%E6%B3%95%E4%B9%8Brete%E7%AE%97%E6%B3%95/</guid>
      <description>Fact（事实）：对象之间及对象属性之间的关系
Rule：条件和结论构成的推理语句，一般表示为if…Then。
条件部分，LHS（left-hand-side）
结论部分，RHS（right-hand-side）
Module（模式）：指不能再继续分割下去的最小的原子条件。
模式就是if语句中的条件，但是条件可能是由几个更小粒度的条件组成，所以模式特指不能再继续被分割的最小原子条件。
RETE 算法主要流程 RETE 算法主要流程可以分为以下步骤：
1 Match：找出符合LHS部分的working memory集合 2 Confilict resolution：选出一个条件被满足的规则 3 Act：执行RHS的内容 4 返回第一步 </description>
    </item>
    
    <item>
      <title>任务调度之时间轮算法</title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E8%BD%AE%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E8%BD%AE%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 19 Jul 2023 16:11:18 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E8%BD%AE%E7%AE%97%E6%B3%95/%E6%97%B6%E9%97%B4%E8%BD%AE%E7%AE%97%E6%B3%95/</guid>
      <description>核心思想
使用场景 定时器、延迟执行、基于时间任务调度
实现思路 时间轮
角色：ptr、bucket、slot、jiffy ptr：指针，随着时间的推移，指针不停地向前移动。 bucket：时间轮由bucket组成，如上图，有12个bucket。每个bucket都挂载了未来要到期的节点（即: 定时任务）。 slot：指相邻两个bucket的时间间隔。 jiffy：slot的单位，1s（1HZ），如上图，总共12个bucket，那么两个相邻的bucket的时间间隔就是一秒。 rotation：表示时间轮要在转动几圈之后才执行定时器，轮数。</description>
    </item>
    
    <item>
      <title>限流算法之计数器</title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/%E8%AE%A1%E6%95%B0%E5%99%A8%E7%AE%97%E6%B3%95/</link>
      <pubDate>Wed, 19 Jul 2023 16:11:18 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/%E8%AE%A1%E6%95%B0%E5%99%A8%E7%AE%97%E6%B3%95/</guid>
      <description> 核心流程 通过计数器控制1s内的可访问请求数
弊端：瞬时流量大
设置限流100qps， 1. 那么第一个请求进入时开始计时，并设置计数器n=1， 2. 后续每进入一个请求时，都进行n++， 3. 直至时间到达1s后，将时间和计数器清零。 4. 在0-1s内，当请求总数n=100后，拒绝后续的请求，直至时间到达一秒后重置时间和计数器 突刺现象： 1s内的100个请求集中在前10ms内爆发。在能处理过来的情况下，后990ms都只能拒绝请求。 </description>
    </item>
    
    <item>
      <title>限流算法之令牌桶</title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/%E4%BB%A4%E7%89%8C%E6%A1%B6%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 19 Jul 2023 16:11:18 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/%E4%BB%A4%E7%89%8C%E6%A1%B6%E6%A8%A1%E5%9E%8B/</guid>
      <description> 令牌桶核心流程 通过token系统拿token 携带有效token即认定为合法请求 无效token或无token则拒绝 细节剖析 令牌桶模型是由以下几个角色组成的： 令牌 - 相当于门票，允许服务请求处理的标识 桶 - 令牌的载体，相当于售票处 令牌生产者 - 匀速生成令牌并放入桶内的程序 是开发者控制流量的手段，开发者可以控制每10ms生成一个令牌。 当令牌数量达到上限时，就丢弃令牌。 </description>
    </item>
    
    <item>
      <title>限流算法之漏桶</title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/%E6%BC%8F%E6%A1%B6%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 19 Jul 2023 16:11:18 +0800</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/%E6%BC%8F%E6%A1%B6%E6%A8%A1%E5%9E%8B/</guid>
      <description> 漏桶核心流程 通过代码控制请求，通过平均时间段，均匀散布一秒内的请求。
弊端：保证不了每个请求之间正好是100ms，可能会是120ms .. 这样会降低一秒内的请求数。
1.假设1s限流100 【每秒请求量为100，preRequest=1/100】 2.那么漏桶模型则是将100个请求散布在这1s内【请求1处理完成时刻记做limiter.last,请求2进入时刻与last对比，没有达到preRequest,则让当前线程sleep至间隔时间刚好等于preRequest即可】 3.理论上每个请求10ms【正常情况下】 4.但是会出现此种情况！ 1.请求1执行完成15ms后请求2才到达，此时立即执行请求2，请求3在请求2执行完成5ms后到达， 理论上要sleep 5ms后才能执行请求3，但是如此的话总耗时就为15+10=25ms，理想状态应该是20ms才可以， 所以引入【将之前所有多余的耗时累计起来，在后续做抵消使用，该值可正可负， 正：前面等待时间过长超过preRequest，负：前面等待时间不足preRequest】 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>https://blog.csdn.net/u013309870/article/details/75193592
动态规划算法核心：记住已经解决过的子问题的解 实现动态规划堆方法有两个 1 自顶向下的备忘录法 2 自底向上
自顶向下的备忘录法 对于每个子问题的结果进行存储，当类似递归的算法，再执行到子问题时，可以直接使用，无须再计算。
自底向上</description>
    </item>
    
    <item>
      <title></title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%8F%8C%E6%8C%87%E9%92%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%A0%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E5%A0%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%A0%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%A0%88/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%A0%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E6%A0%91/</guid>
      <description> 先序遍历 中左右 中序遍历 左中右 后序遍历 左右中 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B7%B3%E8%A1%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://huangruiying.github.io/%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/0.%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/%E8%B7%B3%E8%A1%A8/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
