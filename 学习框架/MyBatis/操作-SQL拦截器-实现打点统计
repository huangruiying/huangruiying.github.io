
import com.google.common.base.Strings;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.tuple.Triple;
import org.apache.ibatis.cache.CacheKey;
import org.apache.ibatis.executor.Executor;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.plugin.*;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.ResultHandler;
import org.apache.ibatis.session.RowBounds;

import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.Properties;



@Intercepts({
        @Signature(type = Executor.class, method = "update", args = {MappedStatement.class, Object.class}),
        @Signature(type = Executor.class, method = "query", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class}),
        @Signature(type = Executor.class, method = "query", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class}),
        @Signature(type = Executor.class, method = "queryCursor", args = {MappedStatement.class, Object.class, RowBounds.class})
})
@Slf4j
public class PointMybatisInterceptor implements Interceptor {

    private static final String DEFAULT_DAO_NAME = "dao_default";

    private Map<String, String> daoNameCache = Maps.newConcurrentMap();

    private static List<Triple<Long, Long, String>> intervalList = Lists.newArrayList();

    private static List<Triple<Integer, Integer, String>> sizeIntervalList = Lists.newArrayList();

    static {
        intervalList.add(Triple.of(0L, 100L, "0-100"));
        intervalList.add(Triple.of(100L, 1000L, "100-1000"));
        intervalList.add(Triple.of(1000L, 3000L, "1000-3000"));
        intervalList.add(Triple.of(3000L, Long.MAX_VALUE, "3000-na"));

        sizeIntervalList.add(Triple.of(0, 200, "0-200"));
        sizeIntervalList.add(Triple.of(200, 1000, "200-1000"));
        sizeIntervalList.add(Triple.of(1000, 10000, "1000-10000"));
        sizeIntervalList.add(Triple.of(10000, Integer.MAX_VALUE, "1000-na"));
    }

    @Override
    public Object intercept(Invocation invocation) throws Throwable {
        log.debug("Mybatis interceptor SQL");
        MappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[0];
        String id = mappedStatement.getId();
        String daoName = getDaoName(id);

        Map<String, String> tagMap = Maps.newHashMap();
        tagMap.put("method", daoName);
        tagMap.put(MonitorKeys.TAG_STATUS_KEY, MonitorKeys.TAG_STATUS_SUCCESS);

        Object parameter = null;
        if (invocation.getArgs().length > 1) {
            parameter = invocation.getArgs()[1];
        }
        int collectRetSize = 1;
        long startTime = System.currentTimeMillis();
        try {
            Object object = invocation.proceed();
            if (object instanceof Collection) {
                collectRetSize = ((Collection) object).size();
            }
            return object;
        } catch (Throwable e) {
            tagMap.put(MonitorKeys.TAG_STATUS_KEY, MonitorKeys.TAG_STATUS_EXCEPTION);
            try {
                BoundSql boundSql = mappedStatement.getBoundSql(parameter);
                Configuration configuration = mappedStatement.getConfiguration();
                String sql = SqlInterceptorUtil.getSql(configuration, boundSql);
                SqlExceptionMonitor.recordBySqlExceptionType(e, sql, daoName);
            } catch (Throwable th) {
                log.error("recordBySQLExceptionType", th);
            }
            throw e;
        } finally {
            long costTime = System.currentTimeMillis() - startTime;
            // 耗时统计
            Monitor.recordTime(MonitorKeys.DAO_KEY, costTime, tagMap);
            Monitor.recordTime(MonitorKeys.DAO_TOTAL, costTime);
            // 执行次数统计
            if (costTime >= PlatformCommonApolloConfig.getSlowSqlTime() || collectRetSize > PlatformCommonApolloConfig.getMybatisRetSize()) {
                BoundSql boundSql = mappedStatement.getBoundSql(parameter);
                Configuration configuration = mappedStatement.getConfiguration();
                DbAccessLogUtil.log(costTime, daoName, SqlInterceptorUtil.getSql(configuration, boundSql), null, null, null, collectRetSize);
            }
            monitorCostTimeDistribution(costTime);
            monitorRetSizeDistribution(collectRetSize);
        }
    }

    @Override
    public Object plugin(Object target) {
        return Plugin.wrap(target, this);
    }

    @Override
    public void setProperties(Properties properties) {
    }

    /**
     * 截取代码的中的最后一部分
     * <p>
     * 例如，id是：com..dao.xxDAO.insert
     * 要求返回：xxDAO.insert
     *
     * @param id dao方法的唯一识别
     * @return 简略名
     */
    private String getDaoName(String id) {
        if (Strings.isNullOrEmpty(id)) {
            return DEFAULT_DAO_NAME;
        }
        if (daoNameCache.containsKey(id)) {
            return daoNameCache.get(id);
        } else {
            String[] params = id.split("\\.");
            if (params.length < 2) {
                daoNameCache.put(id, DEFAULT_DAO_NAME);
                return DEFAULT_DAO_NAME;
            }
            String daoName = params[params.length - 2] + "." + params[params.length - 1];
            daoNameCache.put(id, daoName);
            return daoName;
        }
    }

    /**
     * 分时段监控dao耗时
     *
     * @param waste sql耗时
     */
    private void monitorCostTimeDistribution(long waste) {
        for (Triple<Long, Long, String> triple : intervalList) {
            if (waste >= triple.getLeft() && waste < triple.getMiddle()) {
                Monitor.recordTime(MonitorKeys.DAO_COST_DISTRIBUTION_KEY, waste, MonitorKeys.TAG_DAO_ACCESS_TIME, triple.getRight());
                return;
            }
        }
    }

    /**
     * 分大小监控dao返回数量
     *
     * @param size sql返回数量
     */
    private void monitorRetSizeDistribution(int size) {
        for (Triple<Integer, Integer, String> triple : sizeIntervalList) {
            if (size >= triple.getLeft() && size < triple.getMiddle()) {
                Monitor.recordOne(MonitorKeys.DAO_SIZE_DISTRIBUTION_KEY, MonitorKeys.TAG_DAO_RET_SIZE, triple.getRight());
                return;
            }
        }
    }
}
