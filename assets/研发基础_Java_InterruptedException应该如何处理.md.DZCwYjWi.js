import{_ as a,c as n,o as t,a1 as i}from"./chunks/framework.CPsxJxQM.js";const k=JSON.parse('{"title":"InterruptedException","description":"","frontmatter":{},"headers":[],"relativePath":"研发基础/Java/InterruptedException应该如何处理.md","filePath":"研发基础/Java/InterruptedException应该如何处理.md"}'),e={name:"研发基础/Java/InterruptedException应该如何处理.md"};function p(r,s,l,h,d,c){return t(),n("div",null,s[0]||(s[0]=[i(`<h1 id="interruptedexception" tabindex="-1">InterruptedException <a class="header-anchor" href="#interruptedexception" aria-label="Permalink to &quot;InterruptedException&quot;">​</a></h1><p>相信java开发者们对这个异常不陌生，如何产生？有哪些处理方式？该怎么处理？</p><h2 id="立即响应中断-能修改方法签名-throws-interruptedexception" tabindex="-1">立即响应中断：能修改方法签名(throws InterruptedException) <a class="header-anchor" href="#立即响应中断-能修改方法签名-throws-interruptedexception" aria-label="Permalink to &quot;立即响应中断：能修改方法签名(throws InterruptedException)&quot;">​</a></h2><p>就是在出现中断时，做出自己的逻辑，并将中断信号传递给上层。以下是示例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 直接throw抛出InterruptedException</span></span>
<span class="line"><span>private void xxx() throws InterruptedException {</span></span>
<span class="line"><span>    try {</span></span>
<span class="line"><span>        Thread.sleep(1000);</span></span>
<span class="line"><span>    } catch (InterruptedException e) {</span></span>
<span class="line"><span>        throw e;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>但不要直接使用 throw new RuntimeException(e);<br> 因为这样会<strong>吞掉中断信号</strong>，导致上层无法正确感知线程被中断。</p><h2 id="恢复中断状态-不能修改方法签名-不能在方法上加-throws-interruptedexception" tabindex="-1">恢复中断状态：不能修改方法签名(不能在方法上加 throws InterruptedException) <a class="header-anchor" href="#恢复中断状态-不能修改方法签名-不能在方法上加-throws-interruptedexception" aria-label="Permalink to &quot;恢复中断状态：不能修改方法签名(不能在方法上加 throws InterruptedException)&quot;">​</a></h2><p>不能修改方法签名时，只能在内部处理，所以想让上层感知到线程中断，我们就需要恢复中断状态。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (InterruptedException </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">interrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>为什么需要恢复中断状态(Thread.currentThread().interrupt())?</strong></p><blockquote><p>恢复中断状态是为了让上层或后续代码通过 Thread.currentThread().isInterrupted() 检查到中断，从而做出正确响应。</p></blockquote><h2 id="对线程池内的任务-主动发起中断请求" tabindex="-1">对线程池内的任务，主动发起中断请求 <a class="header-anchor" href="#对线程池内的任务-主动发起中断请求" aria-label="Permalink to &quot;对线程池内的任务，主动发起中断请求&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 在线程池或异步任务里,通过Future.cancel实现</span></span>
<span class="line"><span>Future&lt;?&gt; future = executor.submit(task);</span></span>
<span class="line"><span>future.cancel(true); // 中断正在执行的任务</span></span></code></pre></div>`,13)]))}const E=a(e,[["render",p]]);export{k as __pageData,E as default};
