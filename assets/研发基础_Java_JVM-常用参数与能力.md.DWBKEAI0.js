import{_ as s,c as i,o as t,a1 as e}from"./chunks/framework.CPsxJxQM.js";const c=JSON.parse('{"title":"常用的jvm参数","description":"","frontmatter":{},"headers":[],"relativePath":"研发基础/Java/JVM-常用参数与能力.md","filePath":"研发基础/Java/JVM-常用参数与能力.md"}'),n={name:"研发基础/Java/JVM-常用参数与能力.md"};function l(p,a,r,h,o,d){return t(),i("div",null,a[0]||(a[0]=[e(`<h1 id="常用的jvm参数" tabindex="-1">常用的jvm参数 <a class="header-anchor" href="#常用的jvm参数" aria-label="Permalink to &quot;常用的jvm参数&quot;">​</a></h1><h2 id="服务oom时-自动生成堆转储-heapdump" tabindex="-1">服务OOM时，自动生成堆转储(HeapDump) <a class="header-anchor" href="#服务oom时-自动生成堆转储-heapdump" aria-label="Permalink to &quot;服务OOM时，自动生成堆转储(HeapDump)&quot;">​</a></h2><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:+HeapDumpOnOutOfMemoryError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:HeapDumpPath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=/path/to/heapdump.hprof</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.jar</span></span></code></pre></div><h2 id="调整新生代比例" tabindex="-1">调整新生代比例 <a class="header-anchor" href="#调整新生代比例" aria-label="Permalink to &quot;调整新生代比例&quot;">​</a></h2><p>新生代内存，分为<strong>Eden</strong>区和两个<strong>Survivor</strong>区（S0、S1）<br><strong>Eden:</strong></p><ul><li>写入 新创建的对象，首先分配在Eden</li><li>清理 年轻代GC(MinorGC)时，会将Eden中存活的对象移到Survivor中空的区域(S0或S1，即To区)</li></ul><p><strong>Survivor:S0S1</strong> ‘标记-复制’算法。</p><ul><li>写入 Eden和非空的S区(From)中存活的对象，复制到空的S区(To)，并年龄+1</li><li>清理 GC后，由于存活的对象已经复制入另一个空S区(To)，所以将当前S区(From)清理。</li><li>交互 由于此轮的From区已空，所以 From 和 To 区角色互换，用于下次GC</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Eden占N份，S0S1各占1份</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 即</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># N = 8, S0 = 1, S1 = 1, 会将新生代共划分10份</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># N = 5, S0 = 1, S1 = 1, 会将新生代共划分7份</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-XX:SurvivorRatio</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=N</span></span></code></pre></div><h2 id="开启指针压缩" tabindex="-1">开启指针压缩 <a class="header-anchor" href="#开启指针压缩" aria-label="Permalink to &quot;开启指针压缩&quot;">​</a></h2><p>-XX:+UseCompressedOops</p><table tabindex="0"><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>节省内存，特别是小对象多时效果明显</td><td>解压缩操作带来轻微性能开销</td></tr><tr><td>提高缓存命中率</td><td>不支持大于约 32GB~64GB 的堆(超出寻址范围)</td></tr><tr><td>默认开启，无需配置</td><td>特殊场景下（JNI、大堆）需关闭以规避问题</td></tr></tbody></table>`,12)]))}const u=s(n,[["render",l]]);export{c as __pageData,u as default};
