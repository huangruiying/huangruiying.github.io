import{_ as i,c as a,o as n,a1 as t}from"./chunks/framework.BMsMDqYY.js";const o=JSON.parse('{"title":"有什么区别？","description":"","frontmatter":{},"headers":[],"relativePath":"研发基础/java/ThreadPoolTaskExecutor和ThreadPoolExecutor区别.md","filePath":"研发基础/java/ThreadPoolTaskExecutor和ThreadPoolExecutor区别.md"}'),h={name:"研发基础/java/ThreadPoolTaskExecutor和ThreadPoolExecutor区别.md"};function e(l,s,p,k,E,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="有什么区别" tabindex="-1">有什么区别？ <a class="header-anchor" href="#有什么区别" aria-label="Permalink to &quot;有什么区别？&quot;">​</a></h1><p>如果说 ThreadPoolExecutor 是 发动机，那 ThreadPoolTaskExecutor 就是给这个发动机装了 遥控器和仪表盘，可以通过 Spring 来控制它、监控它、用注解驱动它。</p><h2 id="三种线程池实现" tabindex="-1">三种线程池实现 <a class="header-anchor" href="#三种线程池实现" aria-label="Permalink to &quot;三种线程池实现&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadPoolConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// @Async生效。Spring 会 偷偷包一层 TaskExecutorAdapter，让它能支持 @Async。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ThreadPoolExecutor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThreadPoolExecutor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">threadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				corePoolSize,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				maximumPoolSize,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				keepAliveTime, TimeUnit.MILLISECONDS,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayBlockingQueue&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadFactoryBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setNameFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ThreadPoolExecutor-%d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StandbyExecutePolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(standbyReceivePaymentQuotaExecutor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// @Async生效。Spring 会尝试宽松类型匹配，去找 Executor 相关类型的 Bean，结果找到了这个。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ExecutorService&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExecutorService </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executorService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadPoolExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				corePoolSize,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				maximumPoolSize,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				keepAliveTime, TimeUnit.MILLISECONDS,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ArrayBlockingQueue&lt;&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadFactoryBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setNameFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ExecutorService-%d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StandbyExecutePolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(standbyReceivePaymentQuotaExecutor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	// @Async生效。支持指标等基础能力</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Bean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ThreadPoolTaskExecutor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ThreadPoolTaskExecutor </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">threadPoolTaskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		ThreadPoolTaskExecutor executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ThreadPoolTaskExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCorePoolSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(corePoolSize);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setMaxPoolSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maximumPoolSize);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setKeepAliveSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) (keepAliveTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setQueueCapacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setThreadNamePrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ThreadPoolTaskExecutor-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRejectedExecutionHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">				new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StandbyExecutePolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(standbyReceivePaymentQuotaExecutor));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		executor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> executor;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="为什么不推荐threadpoolexecutor-涉及安全和兼容性问题" tabindex="-1">为什么不推荐ThreadPoolExecutor?涉及安全和兼容性问题 <a class="header-anchor" href="#为什么不推荐threadpoolexecutor-涉及安全和兼容性问题" aria-label="Permalink to &quot;为什么不推荐ThreadPoolExecutor?涉及安全和兼容性问题&quot;">​</a></h2><h3 id="_1-异常处理机制不生效" tabindex="-1">1. 异常处理机制不生效 <a class="header-anchor" href="#_1-异常处理机制不生效" aria-label="Permalink to &quot;1. 异常处理机制不生效&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;receivePaymentQuotaExecutor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSomething</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Oops&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果用 ThreadPoolTaskExecutor，可以配置异常处理器来记录异常。<br> 但用原生 ThreadPoolExecutor，异常直接吞掉，没有任何提示。</p><h3 id="_2-线程池生命周期得不到spring容器管理" tabindex="-1">2. 线程池生命周期得不到spring容器管理 <a class="header-anchor" href="#_2-线程池生命周期得不到spring容器管理" aria-label="Permalink to &quot;2. 线程池生命周期得不到spring容器管理&quot;">​</a></h3><p>当停止容器时 ThreadPoolTaskExecutor在关闭时会自动调用executor.shutdown。（实现了 InitializingBean 和 DisposableBean）。</p><h3 id="_3-监控、调优" tabindex="-1">3. 监控、调优 <a class="header-anchor" href="#_3-监控、调优" aria-label="Permalink to &quot;3. 监控、调优&quot;">​</a></h3><p>ThreadPoolExecutor难以监控，而ThreadPoolTaskExecutor提供了很多接口查看线程池相关信息。</p><h3 id="_4-与spring集成" tabindex="-1">4. 与Spring集成 <a class="header-anchor" href="#_4-与spring集成" aria-label="Permalink to &quot;4. 与Spring集成&quot;">​</a></h3><p>像下面这些 Spring 的异步组件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@Async 的异常追踪</span></span>
<span class="line"><span>@Scheduled 的线程池调度</span></span>
<span class="line"><span>Spring Cloud 任务分发</span></span>
<span class="line"><span>Spring Boot Actuator 的线程池指标</span></span></code></pre></div><p>很多都需要你用 Spring 管理的线程池类，直接用 JDK 原生的 ThreadPoolExecutor 是没法被集成监控和跟踪的。</p>`,16)]))}const c=i(h,[["render",e]]);export{o as __pageData,c as default};
