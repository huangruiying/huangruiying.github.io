import{_ as e,c as t,o as r,a1 as o}from"./chunks/framework.CPsxJxQM.js";const u=JSON.parse('{"title":"支付通道稳定性建设","description":"","frontmatter":{},"headers":[],"relativePath":"支付系统/稳定性：支付通道稳定性建设方向.md","filePath":"支付系统/稳定性：支付通道稳定性建设方向.md"}'),l={name:"支付系统/稳定性：支付通道稳定性建设方向.md"};function i(h,a,n,d,s,c){return r(),t("div",null,a[0]||(a[0]=[o('<h1 id="支付通道稳定性建设" tabindex="-1">支付通道稳定性建设 <a class="header-anchor" href="#支付通道稳定性建设" aria-label="Permalink to &quot;支付通道稳定性建设&quot;">​</a></h1><h2 id="域名冷热备" tabindex="-1">域名冷热备 <a class="header-anchor" href="#域名冷热备" aria-label="Permalink to &quot;域名冷热备&quot;">​</a></h2><ul><li>在与通道交互侧，使用域名时要有备用域名，通过域名探活进行切换。</li><li>域名维护到表，同通道主备域名优先级用权重标识。</li><li>探活任务秒级探活，失败标记不可用，成功标记可用。使用时在可用范围内取权重高的一个。</li><li>兜底域名，所有都不可用时兜底域名。</li></ul><h2 id="支付通道自动化管理" tabindex="-1">支付通道自动化管理 <a class="header-anchor" href="#支付通道自动化管理" aria-label="Permalink to &quot;支付通道自动化管理&quot;">​</a></h2><p>自动降级与自愈。</p><ul><li>降级：通道不可用时可以通过断路器等措施，进行「通道重定向」，到一个备用通道完成支付。</li><li>下线：通道不可用时自动下线当前通道，让后续单据可以选择其他正常通道通道进行收单支付。</li><li>自愈：当通道可用或者成功率到达预期时，对通道、商户号进行上线。具体粒度跟实际业务有关。</li><li>举例：使用微信通道进行收款时，需同时存在n个支持微信的通道(间连+直连)，当最高优先级通道不可用时，对该通道进行降级，自动切换到次优先级通道。当最高优先级通道可用时，再进行恢复(回切)。</li></ul><h2 id="监控慢回告" tabindex="-1">监控慢回告 <a class="header-anchor" href="#监控慢回告" aria-label="Permalink to &quot;监控慢回告&quot;">​</a></h2><p>当支付通道回告、主动查询pending时间过长，导致单据一直处于中间态，此时需要对通道报警 + 降级，提高用户体验(一直等支付结果)，防止大面积扩散导致的客诉率飙升。</p><h2 id="通道波动监控-支付单数量波动" tabindex="-1">通道波动监控：支付单数量波动 <a class="header-anchor" href="#通道波动监控-支付单数量波动" aria-label="Permalink to &quot;通道波动监控：支付单数量波动&quot;">​</a></h2><p>当波动大时，确认是否符合业务预期（盗刷、薅羊毛等），同时采用基础数据进行对比（同比环比）</p><h2 id="通道接口异常监控-核心接口网络波动、业务异常" tabindex="-1">通道接口异常监控：核心接口网络波动、业务异常 <a class="header-anchor" href="#通道接口异常监控-核心接口网络波动、业务异常" aria-label="Permalink to &quot;通道接口异常监控：核心接口网络波动、业务异常&quot;">​</a></h2><p>根据不同异常进行打点（可以以 <strong>通道-code</strong> 做tag），并监控汇总、业务code、超时等问题，做到通道精准降级。（比如有些场景无需降级：因用户余额不足或其他非通道自身问题导致的。）</p><h2 id="针对必要的支付条件监控-对于部分通道的token生成、scheme生成-直接影响支付稳定性的参数做监控及降级。" tabindex="-1">针对必要的支付条件监控：对于部分通道的token生成、scheme生成，直接影响支付稳定性的参数做监控及降级。 <a class="header-anchor" href="#针对必要的支付条件监控-对于部分通道的token生成、scheme生成-直接影响支付稳定性的参数做监控及降级。" aria-label="Permalink to &quot;针对必要的支付条件监控：对于部分通道的token生成、scheme生成，直接影响支付稳定性的参数做监控及降级。&quot;">​</a></h2><h2 id="超时快速失败or熔断" tabindex="-1">超时快速失败or熔断： <a class="header-anchor" href="#超时快速失败or熔断" aria-label="Permalink to &quot;超时快速失败or熔断：&quot;">​</a></h2><p>设置合理的链接超时时间，防止因时间过长，导致连接大量占用，拖垮系统。<br> 设置合理熔断策略，详细见熔断</p><h2 id="回告率下降" tabindex="-1">回告率下降： <a class="header-anchor" href="#回告率下降" aria-label="Permalink to &quot;回告率下降：&quot;">​</a></h2><p>监控时间窗口内中间态订单比例，超过5%进行报警。</p><h2 id="通道重路由" tabindex="-1">通道重路由： <a class="header-anchor" href="#通道重路由" aria-label="Permalink to &quot;通道重路由：&quot;">​</a></h2><p>当前通道下单失败时，当前支付单立即换一个通道进行下单。保障单据支付成功率。当然换太多也不好，毕竟是请求外部http，会影响链路的时常。所以一般需要根据实际业务场景、上游超时时间等酌情考虑如何重路由。</p>',19)]))}const p=e(l,[["render",i]]);export{u as __pageData,p as default};
