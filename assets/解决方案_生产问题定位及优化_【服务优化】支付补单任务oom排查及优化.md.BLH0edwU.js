import{_ as i,c as a,o as n,a1 as l}from"./chunks/framework.CPsxJxQM.js";const t="/assets/%E3%80%90%E6%9C%8D%E5%8A%A1%E4%BC%98%E5%8C%96%E3%80%91%E6%94%AF%E4%BB%98%E8%A1%A5%E5%8D%95%E4%BB%BB%E5%8A%A1oom%E6%8E%92%E6%9F%A5%E5%8F%8A%E4%BC%98%E5%8C%96.DqHiyAeY.png",c=JSON.parse('{"title":"支付补单任务oom排查及优化","description":"","frontmatter":{},"headers":[],"relativePath":"解决方案/生产问题定位及优化/【服务优化】支付补单任务oom排查及优化.md","filePath":"解决方案/生产问题定位及优化/【服务优化】支付补单任务oom排查及优化.md"}'),p={name:"解决方案/生产问题定位及优化/【服务优化】支付补单任务oom排查及优化.md"};function e(h,s,k,r,E,d){return n(),a("div",null,s[0]||(s[0]=[l('<h1 id="支付补单任务oom排查及优化" tabindex="-1">支付补单任务oom排查及优化 <a class="header-anchor" href="#支付补单任务oom排查及优化" aria-label="Permalink to &quot;支付补单任务oom排查及优化&quot;">​</a></h1><p>生产环境有一个渠道突然压测，导致系统内生产了大量的未支付订单，历史补单任务逻辑有问题，引起的服务oom。</p><h2 id="历史设计" tabindex="-1">历史设计 <a class="header-anchor" href="#历史设计" aria-label="Permalink to &quot;历史设计&quot;">​</a></h2><p>单线程捞取数据，放入队列内<code>Queue&lt;List&lt;info&gt;&gt;</code><img src="'+t+`" alt="【服务优化】支付补单任务oom排查及优化.png"></p><h3 id="⚡️问题点⚡️" tabindex="-1">⚡️问题点⚡️ <a class="header-anchor" href="#⚡️问题点⚡️" aria-label="Permalink to &quot;⚡️问题点⚡️&quot;">​</a></h3><ol><li>阻塞队列不去重复;由于阻塞队列设计的是直接向后一个节点写入值，所以不涉及去重的概念。</li><li>补单任务在服务内，达不到多实例并行，低吞吐</li><li>业务方异常时会堆积通知（处理不完&amp;重复拉取），导致内存溢出</li></ol><h2 id="解决方案-统一调度-捞取待支付-多实例并行消费-进行补单动作" tabindex="-1">解决方案：统一调度(捞取待支付) + 多实例并行消费(进行补单动作) <a class="header-anchor" href="#解决方案-统一调度-捞取待支付-多实例并行消费-进行补单动作" aria-label="Permalink to &quot;解决方案：统一调度(捞取待支付) + 多实例并行消费(进行补单动作)&quot;">​</a></h2><blockquote><p>优点：<br> 统一调度，并行处理，增加处理吞吐量， 且实例易扩展，容易扩缩容<br></p></blockquote><h3 id="_0-定义去重队列" tabindex="-1">0.定义去重队列 <a class="header-anchor" href="#_0-定义去重队列" aria-label="Permalink to &quot;0.定义去重队列&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DedupBlockingQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BlockingQueue&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; queue;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; dedupSet;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DedupBlockingQueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> capacity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.queue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LinkedBlockingQueue&lt;&gt;(capacity);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dedupSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ConcurrentHashMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newKeySet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(E </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		// 保证幂等性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (dedupSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> E </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InterruptedException {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		E e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> queue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		dedupSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_1-统一调度生产-producer" tabindex="-1">1.统一调度生产（Producer） <a class="header-anchor" href="#_1-统一调度生产-producer" aria-label="Permalink to &quot;1.统一调度生产（Producer）&quot;">​</a></h3><ul><li><p>调度中心（<code>xxl-job</code>）定时触发任务。</p></li><li><p>每次任务调度负责：</p><ul><li>捞取待补单数据（如：支付失败、订单异常等）；</li><li>将补单任务写入<strong>实例的阻塞队列</strong>（也可使用mq）；</li></ul></li><li><p>调度任务均匀分发到集群中任意实例（xxljob路由策略）。</p></li></ul><blockquote><p>🎯目标：<strong>任务生产分布式、均衡、定时、可靠。</strong></p></blockquote><h3 id="_2-实例监听消费-consumer" tabindex="-1">2.实例监听消费（Consumer） <a class="header-anchor" href="#_2-实例监听消费-consumer" aria-label="Permalink to &quot;2.实例监听消费（Consumer）&quot;">​</a></h3><ul><li>集群内每个实例独立启动<strong>消费者监听线程</strong>；</li><li>从队列中阻塞式拉取任务并执行补单逻辑；</li><li>保证幂等处理，避免重复补单；</li><li>支持失败重试、死信转移等机制（可选）；</li></ul><blockquote><p>🎯目标：<strong>任务并行消费、实例解耦、自动扩缩容。</strong></p></blockquote><hr><h3 id="架构示意图" tabindex="-1">架构示意图： <a class="header-anchor" href="#架构示意图" aria-label="Permalink to &quot;架构示意图：&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>        [调度中心 xxl-job]</span></span>
<span class="line"><span>                │</span></span>
<span class="line"><span>        ┌───────▼────────┐</span></span>
<span class="line"><span>        │ 捞取待补单记录 │</span></span>
<span class="line"><span>        └───────┬────────┘</span></span>
<span class="line"><span>                ▼</span></span>
<span class="line"><span>        [分布式队列（如 Redis）]</span></span>
<span class="line"><span>            ▲      ▲      ▲</span></span>
<span class="line"><span>            │      │      │</span></span>
<span class="line"><span>     实例A  实例B  实例C  ...（监听队列并消费）</span></span></code></pre></div>`,19)]))}const g=i(p,[["render",e]]);export{c as __pageData,g as default};
