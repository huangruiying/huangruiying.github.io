import{_ as i,c as a,o as n,a1 as l}from"./chunks/framework.CPsxJxQM.js";const g=JSON.parse('{"title":"EasyRule中应用MVEL导致锁竞争问题","description":"","frontmatter":{},"headers":[],"relativePath":"解决方案/规则引擎EasyRule性能过低.md","filePath":"解决方案/规则引擎EasyRule性能过低.md"}'),e={name:"解决方案/规则引擎EasyRule性能过低.md"};function h(p,s,t,k,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="easyrule中应用mvel导致锁竞争问题" tabindex="-1">EasyRule中应用MVEL导致锁竞争问题 <a class="header-anchor" href="#easyrule中应用mvel导致锁竞争问题" aria-label="Permalink to &quot;EasyRule中应用MVEL导致锁竞争问题&quot;">​</a></h1><p>我们支付服务，在请求支付通道之前会有通道路由，目的是根据下单参数，能准确的匹配到收款的通道与商户。 在匹配路由的逻辑，我们使用了EasyRule引擎，但是最近核心代码变动压测时，发现测试环境下单接口只能压到2.5qps作用，虽然测试环境性能一般，但是也太低了。 于是开始排查问题，最终定位EasyRule使用时在MVEL处理上有性能瓶颈。</p><h2 id="_1-多线程创建规则-并改变注册规则方式" tabindex="-1">1.多线程创建规则，并改变注册规则方式 <a class="header-anchor" href="#_1-多线程创建规则-并改变注册规则方式" aria-label="Permalink to &quot;1.多线程创建规则，并改变注册规则方式&quot;">​</a></h2><p>通过分析发现，在EasyRule规则创建与注册较慢；之前是通过逐一创建规则、注册的方式。本次变更通过构造器一次性注册。</p><h4 id="变更前" tabindex="-1">变更前 <a class="header-anchor" href="#变更前" aria-label="Permalink to &quot;变更前&quot;">​</a></h4><p>将表达式逐个创建成Rule规则，然后依次注册到Rules</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Rules rules = new Rules();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>for:exprList</span></span>
<span class="line"><span>    Rule r = new MVELRule()</span></span>
<span class="line"><span>    rules.register(r);</span></span></code></pre></div><h4 id="变更后" tabindex="-1">变更后 <a class="header-anchor" href="#变更后" aria-label="Permalink to &quot;变更后&quot;">​</a></h4><ul><li>多线程创建Rule，并缓存。</li><li>缓存两分钟，后续请求无需重复创建，直接使用。</li><li>一次性初始化到Rules，取消依次注册逻辑。(new Rules(ruleList.toArray()))</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>List&lt;Rule&gt; rList</span></span>
<span class="line"><span>List&lt;Future&lt;Rule&gt;&gt; fList</span></span>
<span class="line"><span></span></span>
<span class="line"><span>for:</span></span>
<span class="line"><span>   fList.add(executor.submit(new MVELRule()))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>for:fList</span></span>
<span class="line"><span>   rList.add(f.get())</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Rules rules = new Rules(rList.toArray());</span></span>
<span class="line"><span></span></span>
<span class="line"><span>多线程并发创建MVELRule</span></span></code></pre></div><p><strong>解决</strong>：通过线程池进行多线程创建MVELRule对象，并统一通过构造函数，注册到Rules<br><strong>效果</strong>：20用户压10qps，p95 5s-&gt;3.5s，qps到达3,问题还是没有解决。</p><h2 id="_2-预热并对规则进行ttl缓存-避免创建和匹配时的资源竞争。" tabindex="-1">2.预热并对规则进行TTL缓存，避免创建和匹配时的资源竞争。 <a class="header-anchor" href="#_2-预热并对规则进行ttl缓存-避免创建和匹配时的资源竞争。" aria-label="Permalink to &quot;2.预热并对规则进行TTL缓存，避免创建和匹配时的资源竞争。&quot;">​</a></h2><p><strong>常见线程问题</strong></p><ol><li>线程死锁：BLOCKED 关键字表示线程在等锁。死锁定位：查看每个 BLOCKED 状态线程的堆栈信息，确定它们正在等待的资源。如果存在循环等待的情况，即 A 线程等待 B 线程持有的锁，而 B 线程又在等待 A 线程持有的锁，则可能发生死锁。</li><li>线程阻塞：BLOCKED关键字。阻塞定位：如果发现有大量线程处于阻塞状态，可能意味着存在某种资源竞争或者同步问题导致的线程阻塞。</li><li>死循环：通过分析线程的调用栈信息，可以发现是否存在循环调用，从而判断是否发生了死循环。</li><li>资源瓶颈：通过分析线程调用栈信息和线程状态，可以发现某些线程在执行特定操作时花费了大量时间，从而定位到可能存在的资源瓶颈问题。</li></ol><h3 id="_2-1-分析线程-使用arthas进行-thread-n-3" tabindex="-1">2.1 分析线程 使用arthas进行 thread -n 3 <a class="header-anchor" href="#_2-1-分析线程-使用arthas进行-thread-n-3" aria-label="Permalink to &quot;2.1 分析线程 使用arthas进行 thread -n 3&quot;">​</a></h3><blockquote><p>为什么线程http-nio-9090-exec-10被阻塞？<br> 因为EasyRule进行fire时，需要MVEL解析表达式(表达式涉及java类型、方法等访问)。此过程需要加载类，争抢ClassLoader内部锁，但此时内部锁被线程RouteRuleCreateExecutor-6持有。</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;http-nio-9090-exec-10&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Id=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">175</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cpuUsage=26.33%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deltaTime=53ms</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> time=25546ms</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BLOCKED</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java.lang.Object@49e661ed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> owned</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> by</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;RouteRuleCreateExecutor-6&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Id=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">250</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.apache.catalina.loader.WebappClassLoaderBase.loadClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WebappClassLoaderBase.java:1152</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  blocked</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java.lang.Object@49e661ed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.apache.catalina.loader.WebappClassLoaderBase.loadClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WebappClassLoaderBase.java:1119</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.util.ParseTools.forNameWithInner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseTools.java:2231</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.optimizers.AbstractOptimizer.tryStaticAccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractOptimizer.java:88</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.compiler.PropertyVerifier.getBeanProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PropertyVerifier.java:257</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.compiler.PropertyVerifier.analyze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PropertyVerifier.java:133</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.compiler.ExpressionCompiler.verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExpressionCompiler.java:399</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.compiler.ExpressionCompiler._compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExpressionCompiler.java:281</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.util.ParseTools.subCompileExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ParseTools.java:2112</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.getMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReflectiveAccessorOptimizer.java:969</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.compileGetChain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReflectiveAccessorOptimizer.java:367</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.optimizers.impl.refl.ReflectiveAccessorOptimizer.optimizeAccessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReflectiveAccessorOptimizer.java:167</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.optimizers.dynamic.DynamicOptimizer.optimizeAccessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DynamicOptimizer.java:81</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.ast.Union.getReducedValueAccelerated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Union.java:44</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.ast.Or.getReducedValueAccelerated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Or.java:35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.ast.Or.getReducedValueAccelerated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Or.java:34</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.compiler.ExecutableAccessor.getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecutableAccessor.java:38</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.ast.Substatement.getReducedValueAccelerated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Substatement.java:44</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.compiler.ExecutableAccessor.getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecutableAccessor.java:38</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.ast.Negation.getReducedValueAccelerated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Negation.java:48</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.ast.And.getReducedValueAccelerated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">And.java:34</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.ast.And.getReducedValueAccelerated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">And.java:35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.compiler.ExecutableAccessor.getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExecutableAccessor.java:42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.MVEL.executeExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MVEL.java:984</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.jeasy.rules.mvel.MVELCondition.evaluate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MVELCondition.java:65</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.jeasy.rules.mvel.MVELRule.evaluate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MVELRule.java:120</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.jeasy.rules.core.DefaultRulesEngine.doFire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultRulesEngine.java:97</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.jeasy.rules.core.DefaultRulesEngine.fire</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultRulesEngine.java:70</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ...</span></span></code></pre></div><p>堆栈信息解读如下：(规则引擎使用MVEL导致的锁竞争)</p><ul><li>阻塞情况：当前线程(http-nio-9090-exec-10 Id=175)被线程RouteRuleCreateExecutor-6 Id=250阻塞。</li><li>阻塞原因：锁java.lang.Object@49e661ed被250持有，但是175需要获取。</li><li>阻塞时间：25546ms</li><li>锁信息：WebappClassLoaderBase#loadClass的</li></ul><h3 id="_2-2-异常代码现场" tabindex="-1">2.2 异常代码现场 <a class="header-anchor" href="#_2-2-异常代码现场" aria-label="Permalink to &quot;2.2 异常代码现场&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WebappClassLoaderBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URLClassLoader</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Lifecycle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InstrumentableClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WebappProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PermissionCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClassNotFoundException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 从http-nio-9090-exec-10线程堆栈信息来看，这里是竞争的位置 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      synchronized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClassLoadingLock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // other ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassNotFoundException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 该方法在java.lang.ClassLoader中引入，JDK 7 以后支持并行类加载。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 能力：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 同类(名className)持有同一个锁对象，不同类的锁相互独立。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * 为了实现同一个类串行加载，不同类可以多线程并行加载。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@param</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> className</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> com.xxx.A</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@return</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> lock</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   protected</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getClassLoadingLock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">className</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Object lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (parallelLockMap </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         Object newLock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lock</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parallelLockMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">putIfAbsent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(className, newLock);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newLock;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lock;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>所以，WebappClassLoaderBase.loadClass() 是同步方法（带锁），当多个线程并发调用 MVEL 编译表达式，并尝试 Class.forName() 加载类时，可能会争抢 ClassLoader 的内部锁</p><blockquote><p>🔔 <strong>类加载器是多线程共享资源，一旦有线程加载类，其他线程必须等待加载完成才能继续。</strong></p></blockquote><h3 id="_2-3-继续看看routerulecreateexecutor-6是什么原因需要classloader这把锁-并且一直占着呢" tabindex="-1">2.3 继续看看RouteRuleCreateExecutor-6是什么原因需要ClassLoader这把锁,并且一直占着呢？ <a class="header-anchor" href="#_2-3-继续看看routerulecreateexecutor-6是什么原因需要classloader这把锁-并且一直占着呢" aria-label="Permalink to &quot;2.3 继续看看RouteRuleCreateExecutor-6是什么原因需要ClassLoader这把锁,并且一直占着呢？&quot;">​</a></h3><p><strong>严重的类加载阻塞问题</strong>：JVM底层 I/O + Tomcat 类加载机制 + MVEL 编译表达式交互下的典型案例。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;RouteRuleCreateExecutor-6&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Id=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">250</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cpuUsage=23.81%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deltaTime=48ms</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> time=89590ms</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BLOCKED</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java.util.zip.ZipFile.getEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.apache.catalina.loader.WebappClassLoaderBase.loadClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WebappClassLoaderBase.java:1152</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.compiler.ExpressionCompiler.compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExpressionCompiler.java:67</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.mvel2.MVEL.compileExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MVEL.java:826</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.jeasy.rules.mvel.MVELCondition.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ini</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MVELCondition.java:59</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.jeasy.rules.mvel.MVELRule.when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MVELRule.java:104</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java.util.concurrent.FutureTask.run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FutureTask.java:266</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java.util.concurrent.ThreadPoolExecutor.runWorker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThreadPoolExecutor.java:1149</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> java.lang.Thread.run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Thread.java:748</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>堆栈信息解读如下：(多线程I/O对「native I/O」锁争抢 导致的阻塞)</p><ul><li>阻塞情况：RouteRuleCreateExecutor-6 从压缩文件读类时被阻塞</li><li>阻塞原因：MVEL加载jvm基础类时需要从jar里读取，但是其他线程持有了 native I/O 锁</li><li>阻塞时间：89590ms</li><li>锁信息：native I/O</li></ul><p>由此可见是在多线程创建MVELRule时，在这个过程会编译传入的MVEL表达式，所以会进行类加载，</p><h3 id="_2-4-第二pa总结" tabindex="-1">2.4 第二PA总结 <a class="header-anchor" href="#_2-4-第二pa总结" aria-label="Permalink to &quot;2.4 第二PA总结&quot;">​</a></h3><p><strong>使用MVEL编译表达式时会涉及加载类，争抢ClassLoader内部锁，同时在加载类时会涉及native I/O锁竞争</strong></p><p>即： 创建MVELRule对象时的when，与rulesEngine.fire操作时都会涉及解析MVEL表达式，从而会造成锁冲突。</p><p>解决：使用Caffeine缓存MVENRule创建的对象，降低竞争。当然，由于规则可能会变，所以缓存时间可以短些，比如1-2min，实际需视业务情况而定。</p><h2 id="最终性能-2qps-100-qps" tabindex="-1">最终性能：2qps-&gt; 100+qps <a class="header-anchor" href="#最终性能-2qps-100-qps" aria-label="Permalink to &quot;最终性能：2qps-&gt; 100+qps&quot;">​</a></h2>`,34)]))}const F=i(e,[["render",h]]);export{g as __pageData,F as default};
